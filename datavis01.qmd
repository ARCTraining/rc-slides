---
format: 
  clean-revealjs:
    self-contained: true
    navigation-mode: linear
    controls-layout: bottom-right
    controls: false
    preview-links: auto
    footer: "[Research IT Website]({{< var rc.website >}}) | [Research IT Query]({{< var rc.servicedesk >}}) | [Courses Material]({{< var rc.material >}})"
code: DataVis 101
name: Introduction to Data Visualisation with Python
---

{{< include _title.qmd >}}
{{< include _team.qmd >}}

## Course objectives

This course should help you to:

- Become familiar with best practice with regards to scientific data visualisation
- Build a toolkit of resources to help you create objective, informative plots
- Use Python and Python libraries such as Matplotlib and Seaborn to create aesthetically pleasing graphics
- Be aware of some common issues when it comes to data visualisation

## Documentation

- Course notes
- These slides: https://arctraining.github.io/rc-slides/datavis
- Hackpad

##

::: {.panel-tabset}

### What is Python

- A flexible, human-readable programming language with simple "syntax"
- It is commonly used for:
    - data analytics
    - scientific programming 
    - visualisation
- It has a huge collection of specialised libraries to solve specific research problems
- It is Open Source

### What is Data Visualisation

- A way of graphically representing data
- Can include plots, graphs, charts, schematics, maps, infographics
- Commonly found in research papers, publications, policy documents, on conference posters, in talks, on news reports...

:::

## Why do you want to learn data vis or Python?

Add a line to the hackpad!

- What's your name and role?
- What department or research group are you in?
- What are you hoping to learn?

## Some examples

![Calculate internal gravity and pressure in planetesimals](datavis-figs/PRAM.png)

##

![Estimate subsidence of volcanic edifices on planets](datavis-figs/volcanoes.png)

##

![Map faults on the surface of Mars](datavis-figs/Figure_1.png)

##

![Model the thermal evolution of meteorite parent bodies](datavis-figs/gr007.jpg)

##

![Plot and analyse x-ray element maps](datavis-figs/Slide84.jpg)

# Data Visualisation: Theory

## Aims for this section

By the end of this section, you should...

- Be able to recognise possible issues with scientific figures and be able to critically evaluate data visualisations
- Have a framework to build useful, objective figures to illustrate your results
- Have resources to further investigate different aspects of scientific figure making

Source material: _Ten Simple Rules for Better Figures_ by [Rougier, Droettboom and Bourne, 2014](https://doi.org/10.1371/journal.pcbi.1003833)

## Rule 1: Know Your Audience

Who will be reading it, in what context?

:::: {.columns}

::: {.column width="40%"}
- You
- Your supervisor(s)
- General scientific or research audience
- Experts in your field
- Experts in a specific method you use
- The general public
- Policy makers
- Undergraduate students
:::

::: {.column width="60%"}
- Scientific journal
- A general lecture on a research area
- An outreach event
- Updating funders
- Funding application
- Thesis examiners
:::

::::

---

- Understand the needs and knowledge level of your audience
- Adjust the complexity of your visualisation to match
- Make sure your visualisation is easily readable and understandable for your intended audience

---

:::: {.columns}

::: {.column width="50%"}
![a. Using default settings, basic histogram](datavis-figs/hist_1.png)
:::

::: {.column width="50%"}
![b. Customising the colour palette, using Seaborn library, multi-panelled figure](datavis-figs/hist_2.png)
:::

::::

---

## Rule 2: Identify Your Message

- The figure should express an idea quickly and succinctly
- It's important to know exactly what the message of the figure is
- Part of this is ensuring *you* know what the message is
  - People can get stuck knowing they "need to make a figure for this chunk of results" but are not sure what they actually need to convey

---

![Trying to pick the right plot for your use-case](datavis-figs/chart-chart1.jpg)

---

![Seaborn categorises its functions for you](datavis-figs/function_overview_8_0.png)

See ["Overview of seaborn plotting functions"](https://seaborn.pydata.org/tutorial/function_overview.html#overview-of-seaborn-plotting-functions) from the Seaborn docs
---

## Browsing documentation galleries can be a good idea...

- [Matplotlib "Plot Types" gallery](https://matplotlib.org/stable/plot_types/index.html#plot-types){preview-link="true"}
- [Matplotlib general gallery](https://matplotlib.org/stable/gallery/index.html){preview-link="true"}
- [Seaborn example gallery](https://seaborn.pydata.org/examples/index.html){preview-link="true"}
- [Pandas chart visualisation guide](https://pandas.pydata.org/docs/user_guide/visualization.html#chart-visualization){preview-link="true"}

Also, check and see what other researchers in your field are using...
---

## Rule 3: Adapt the Figure to the Support Medium

- Understand what medium the figure will be displayed in
- Adapt the figure appropriately
- Related to **Rule 1: Know Your Audience** but more focus on physical medium:
  - Projected on a screen?
  - High resolution printed poster?
  - Journal article read online and zoomable?
  - Likely to be printed out in greyscale?

---

:::: {.columns}

::: {.column width="45%"}
![a. Small font size and line thickness](datavis-figs/hist_3.png)
:::

::: {.column width="45%"}
![b. Large font size, heavy line weight](datavis-figs/hist_4.png)
:::

::::

---

Technical considerations:

- Font size
- Vector graphics vs. raster image
- Line weight
- DPI or resolution
- Colour profile: RGB or CMYK

---

## Rule 4: Captions Are Not Optional

- Captions provide additional context for the figure
- They help the reader to interpret the figure correctly
- They should be treated like axes labels, a legend... e.g. **essential!**

---

What might a caption look like...

- In a published research article?
- On a conference poster?
- In a seminar or talk?
- On an outreach leaflet?
- In a policy document?

---

## Rule 5: Do Not Trust the Defaults

- Default settings in your chosen plotting software may not suit your needs entirely
- Adjust settings as needed

---

::: {.panel-tabset}

### Using default settings

![a. Using default settings, basic histogram](datavis-figs/hist_1.png)

### Some customisation

![b. Customising the colour palette, using Seaborn library, multi-panelled figure](datavis-figs/hist_2.png){width=40%}

:::

---

::: {.panel-tabset}

### Using default settings

![a. Using default settings, basic scatter plot](datavis-figs/scatter1.png)

### Some customisation

![b. Customising the colour palette and changing figure parameters](datavis-figs/scatter2.png)

:::

Of course, the solution might also be that a different plot shows your results more clearly... remember *Rule 2: Identify Your Message*!
---

## Rule 6: Use Colour Effectively

- Colour can be an important asset in your scientific visualisations
- Must be used mindfully to avoid confusion

According to Edward Tufte [1983](<https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1003833#pcbi.1003833>), colour can be either your greatest ally or your worst enemy if not used properly [(Rougier et al., 2014)](<https://doi.org/10.1371/journal.pcbi.1003833>).

---

## Uses for Colour

- Adding an additional dimension to your figures
- Adding clarity to different marker or line styles
- For emphasis
- For heatmaps

---

![Estimate subsidence of volcanic edifices on planets - using both colour and symbol shape to differentiate.](datavis-figs/volcanoes.png)

---


![Topographical map of Mars; co-ordinates system not plotted to avoid discussion on Martian projection systems!](datavis-figs/mars1.png)

---

## Pitfalls of Colour-Use

- Relying purely on colour to distinguish can cause issues with colour vision deficiencies, printing in greyscale, different screen settings
- Colour maps may not accurately represent your data - non-perceptually uniform maps
  - [Matplotlib colour maps documentation](https://matplotlib.org/stable/users/explain/colors/colormaps.html){preview-link="true"}
  -[Even more in depth colour maps, with Proplot](https://proplot.readthedocs.io/en/latest/colormaps.html){preview-link="true"}
  - Colour can be used to accidentally infer order where there is none

---

![Rainbow colour maps such as "jet" have previously been popular despite their issues. "Plasma" is "perceptually uniform" but can obscure details in extreme values.](datavis-figs/mars2.png)

---

!["Terrain" has similar issues to "jet"...](datavis-figs/mars3.png)

---

![Cividis is both "perceptually uniform" and also appears the same to audiences with and without colour vision deficiencies, but has the same issues as "plasma" with obscuring features in plots with a wide dynamic range.](datavis-figs/mars4.png)

---

![Spring is a terrible colour map, even if it's pretty.](datavis-figs/mars5.png)

---

![It can be easier to see the issues in an image than in a map](datavis-figs/leia.png)

---

![Sometimes you do need a plot that will pick up these sorts of features in the dark and bright areas!](datavis-figs/mars7.png)

---

![Other packages such as "Cmocean" also provide well-designed scientific colour maps.](datavis-figs/mars8.png)

---

![Other packages such as "Cmocean" also provide well-designed scientific colour maps... and some strange ones](datavis-figs/mars9.png)

---

![Plot and analyse x-ray element maps](datavis-figs/Slide84.jpg)

---

How can colour infer order?

::: {.panel-tabset}

### First plot

![](datavis-figs/scatter_a.png)

### Second plot

![](datavis-figs/scatter_b.png)

### Visual encoding

Data can be encoded by other means aside from colour... which of these could be ordered or infer order?

:::: {.columns}

::: {.column width="50%"}
- Size
- Shape
- Grouping
- Area
- Position
:::

::: {.column width="50%"}
- Saturation
- Line pattern
- Line weight
- Angle
- Connections
:::

::::


:::

---

## Best Practice

- It is a good practice to, where possible, avoid conveying information purely through color. You should always consider adding other ways to convey the same information besides just color.

- Ensure that colour does not infer order where there is none!

---

## Further Reading

- [Designing colour-blind-friendly visualizations](<https://www.tableau.com/en-gb/blog/examining-data-viz-rules-dont-use-red-green-together>)
- [Coloring for Colorblindness](<https://davidmathlogic.com/colorblind/>)
- [The misuse of colour in science communication](<https://www.nature.com/articles/s41467-020-19160-7>)
- [Scientific colour maps user guide](<https://www.fabiocrameri.ch/ws/media-library/ce2eb6eee7c345f999e61c02e2733962/readme_scientificcolourmaps.pdf>)

---

## Rule 7: Do Not Mislead the Reader

- Figures should represent data as objectively as possible
- Avoid creating misleading figures

This seems straightforward - *to make a good scientific visualisations, don't do academic fraud* - but actually, it's easier to accidentally misrepresent data than you might think.

---

Unintentional misleading of your audience often arises through not fully understanding how you have visually encoded your data.

:::: {.columns}

::: {.column width="50%"}
- Size
- Shape
- Colour
- Grouping
- Area
- Position
:::

::: {.column width="50%"}
- Saturation
- Line pattern
- Line weight
- Angle
- Connections
:::

::::

---

![Stacked barplots; both panels show the same data](datavis-figs/barplot_comparison.png)

---

![Bubble plot, where "z" value is shown by both colour map and size](datavis-figs/bubble.png)

---

![All of these represent the same data...](datavis-figs/sizes.png)

---

![Both represent the same data...](datavis-figs/dnd_corr1.png)

---

![Both represent the same data...](datavis-figs/dnd_corr2.png)

---

![Both represent the same data...](datavis-figs/dnd_corr3.png)

---

## Rule 8: Avoid “Chartjunk”

- Chartjunk refers to all the unnecessary or confusing visual elements found in a figure
- Avoid overloading a figure with too much detail

But do:

- Add enough annotations that the reader understands the figure
- Understand that this is subjective!

If your figure is confusing, try fixing it **by removing something rather than adding extra labels**!

---

![Yikes.](datavis-figs/chartjunk.png)

---

- When should we use gridlines?
- When are annotations helpful?
- What about legends? Are they chart junk?

---

## Rule 9: Message Outshines Beauty

- The key requirement of a scientific graphic is to communicate scientific results
- Aesthetics should not distract from the message

---

![Jet is rubish, and pretty ugly... but Spring is also a terrible colour map, even if it's pretty.](datavis-figs/mars5.png)

---

:::: {.columns}

::: {.column width="60%"}

![Murphy Quinlan et al. (2021)](datavis-figs/jgre21625-fig-0009-m.png)

:::

::: {.column width="40%"}


- I really dislike the look and colour scheme of this, but I have to admit it does a better job of representing my data

:::

::::

---

## Rule 10: Get the Right Tool(s)

- Use appropriate tools for data visualisation
- Scripting languages like Python and R can be more efficient for producing multiple similar plots
- While it is absolutely ok to use a graphics package to add annotations etc. to your plots if you are more comfortable with this, remember to always think about how **reproducible** your workflow is

---

Tools and libraries within Python; * denotes library used in this course

::: {.panel-tabset}


### Basic plots

- [Matplotlib Library](https://matplotlib.org/stable/) *
- [Seaborn Library](https://seaborn.pydata.org/index.html) *
- If working with dataframes, the inbuilt plotting functions in [pandas](https://pandas.pydata.org/docs/user_guide/visualization.html) *
- [Plotly](https://plotly.com/python/)


### Statistical plots

- [Seaborn](https://seaborn.pydata.org/index.html)*
- [Vega-Altair](https://altair-viz.github.io/)


### Geospatial

- [Cartopy](https://scitools.org.uk/cartopy/docs/latest/)
- [PyGMT](https://www.pygmt.org/latest/index.html)
- [Geopandas](https://geopandas.org/en/stable/)

### Custom

- Usually [Matplotlib](https://matplotlib.org/stable/) is the best option if you want total control over every aspect of your plot, and want to build something that doesn't look like any examples from library galleries

### Infographics

- You can use Matplotlib or Seaborn to create some simple, schematic-type plots
- This is one of the areas where a graphics program will probably outshine other tools!


:::

# Lets build some plots!

