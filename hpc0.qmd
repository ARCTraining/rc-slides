---
format: 
  revealjs:
    navigation-mode: linear
    controls-layout: bottom-right
    controls: true
    footer: "[Research IT Website]({{< var rc.website >}}) | [Research IT Query]({{< var rc.servicedesk >}}) | [Courses Material]({{< var rc.material >}})"
code: HPC 0
name: Introduction to the Unix/Linux command line
---

{{< include _title.qmd >}}

{{< include _team.qmd >}}

## Contact Details
- ARC Website: {{< var rc.website >}}
- ARC Documentation: {{< var rc.documentation >}}
- General queries: {{< var rc.servicedesk >}}


## Training
![](assets/img/hpc0/training.png)


## ARC/HPC Training Portfolio
{{< var rc.training >}}
![](assets/img/hpc0/portfolio.png)


## Purpose of today
- Introduce the command line
- Hands on experience and confidence building
- File system navigation
- Creating, reading, updating and deleting files
- File properties: types, sizes, permissions
- File manipulation: inspecting and editing files, searching and filtering
- Introduction to shell scripting


## Introductions and Motivations
- Who are you and why are you here?


## Me {visibility="hidden"}
- Research Computing service
- Research Computing Consultant
- Everything from HPC to Data Science
- RSE Cloud Computing Fellow
- Research in Deep Learning: Neural networks for text summarisation


## What is BASH?
![](assets/img/hpc0/bash.png)


## What is a shell?
![](assets/img/hpc0/shell.png)


## Filesystem basics
![](assets/img/hpc0/filesystem.png)


## Forward slash / and backslash \
![](assets/img/hpc0/slash.png)


## Filesystem basics: absolute path
![](assets/img/hpc0/filesystem-absolute.png)


## Filesystem basics: relative path
![](assets/img/hpc0/filesystem-relative.png)


## Login from Linux/OSx demo


## Login from Windows demo
- Launch MobaXTerm...


## Login {.smaller}
- [ARC Documentation Login]({{< var rc.login >}})
- Please login to ARC3 or ARC4.
\
```{.bash code-line-numbers=false}
ssh <username>@arc4.leeds.ac.uk
```
\
*`<username>` is your university username.*


## The prompt {.smaller}
- You should see something like the following:
\
```{.bash code-line-numbers=false}
[user@host ~]$
```
- '`user`' is your username
- '`host`' either starts '`login1.`' or '`login2.`' (there are two login nodes for ARC3 and ARC4) and is followed by the name of the resource '`arc3`' or '`arc4`' depending on which you are logged in to.
- You login to your user home directory represented by '`~`' (tilda) in the prompt.
- After the prompt - after the `$` symbol is where commands are entered...


## First (safe) commands {.smaller}
- [ARC Documentation Helpful Shell Commands]({{< var rc.commands >}})
\
\
<table>
  <tr>
    <th>Command</th>
    <th>Description</th>
  </tr>
  <tr>
    <td>`pwd`</td>
    <td>Print the working (current) directory</td>
  </tr>
  <tr>
    <td>`man`</td>
    <td>Look up the manual page</td>
  </tr>
  <tr>
    <td>`ls`</td>
    <td>List the contents of a directory</td>
  </tr>
  <tr>
    <td>`mkdir`</td>
    <td>Make a new directory (folder)</td>
  </tr>
  <tr>
    <td>`cd`</td>
    <td>Change directory</td>
  </tr>
</table>
\
- Let us use these in turn to understand them better...


## `pwd` {.smaller}
- A command to print the working directory.
```{.bash code-line-numbers=false}
[user@host ~]$ pwd
/home/homeXX/user
```
- When you run this the ouput will be slightly different:
  - '`XX`' should be a number which is directory where your home drive is
  - '`user`' should be your username
 

## `pwd` demo {.smaller}
- Keep it simple!


## `pwd` exercise {.smaller}
- Enter '`pwd`' at the prompt by typing the letters and then pressing the \<return> or \<enter> key.


## `--help` {.smaller}
- A command option that can be used to get help on using a command.
- Entering '`pwd --help`' prints help about the `pwd` command.
```{.bash code-line-numbers=false}
[user@host ~]$ pwd --help
pwd: pwd [-LP]
    Print the name of the current working directory.
    
    Options:
      -L	print the value of $PWD if it names the current working
    		directory
      -P	print the physical directory, without any symbolic links
    
    By default, `pwd' behaves as if `-L' were specified.
    
    Exit Status:
    Returns 0 unless an invalid option is given or the current directory
    cannot be read.
```


## `man`
- A command to bring up the manual page.
- For help using `man`: press the h-key `<h>`.
- To quit the help about `man` or the man page: press `<q>`.
- To page through a man page: press `<space_bar>`.
- '`man man`' is the man page of the `man` command.


## `--help` and `man` demo


## `--help` and `man` exercise {.smaller}
- Enter '`pwd --help`'
- Enter '`man pwd`'
- For help using `man`: press the h-key `<h>`.
- To quit the help about `man` or any man page: press `<q>`.
- To page through a man page: press `<space_bar>`.


## `ls` 1/2 {.smaller}
- A command can be used to list the contents of a directory.
- With seemingly nothing in a directory this will print nothing out.
```{.bash code-line-numbers=false}
[user@host ~]$ ls
[user@host ~]$ 
```
- Files and directories starting with '`.`' are hidden.
- We can use options to list more details
  - The `-a` option will list all the contents of a directory.
  - The `-l` option will list each item line by line with added details.
- (Options can be listed in any order or combined.)


## `ls` 2/2 {.smaller}
- Entering '`ls -al`' or '`ls -la`' or '`ls -a -l`' or '`ls -l -a`' is equivallent and should result in something like shown below:
```{.bash code-line-numbers=false}
[user@host ~]$ ls -al
total 8
drwx------     2 user group   4096 MMM DD hh:mm .
drwxr-xr-x     3 root root    4096 MMM DD hh:mm ..
...
```
- The last part of each line output is the name and '`.`' is this directory and '`..`' is the parent directory.
- Please don't worry about the other details for now...
- An '`ls -al`' in your home directory should result in many more lines of output and the details will look a bit different.
  - This will reveal hidden but important files and directories
    - Please also don't worry about what these are for now...


## `mkdir` {.smaller}
- A command used to create a directory.
```{.bash code-line-numbers=false}
[user@host ~]$ mkdir test
```
- Attempting to create a directory that already exists prints a warning.
```{.bash code-line-numbers=false}
[user@host ~]$ mkdir test
mkdir: cannot create directory ‘test’: File exists
```
- The '`-p`' option allows for creating parent directories.
- The following creates the directory '`test2`' and in this the directory '`test4`'.
```{.bash code-line-numbers=false}
[user@host ~]$ mkdir test2/test3
```
- To create a directory, you must have permission to write to the directory in which it is being created.
- Without write permissions a warning is printed:
```{.bash code-line-numbers=false}
[user@host ~]$ mkdir /test
mkdir: cannot create directory ‘/test’: Permission denied
```


## `cd` {.smaller}
- The `cd` command can be used to change directory.
```{.bash code-line-numbers=false}
[user@host ~]$ cd test
[user@host ~/test]$
```
- Notice that the prompt changes.
- Without read permission you cannot change into a directory and a warning is printed:
```{.bash code-line-numbers=false}
[user@host ~]$ cd /root
-bash: cd: /root: Permission denied
```


## `ls`, `mkdir` and `cd` demo {.smaller}


## `ls`, `mkdir` and `cd` exercise {.smaller}
- Explore using `ls`, `mkdir` and `cd`
- You will only be allowed to cd into directories you can read.
- You can do no damage snooping around
  - But you may see things you are not supposed to (if other users have the wrong permissions on their directories).


## Second commands {.smaller}
- [ARC Documentation Helpful Shell Commands]({{< var rc.commands >}})
\
\
<table>
  <tr>
    <th>Command</th>
    <th>Description</th>
  </tr>
  <tr>
    <td>`mv`</td>
    <td>Move a file or directory (can be used to rename)</td>
  </tr>
  <tr>
    <td>`cp`</td>
    <td>Copy a file or directory - using the `-r` option</td>
  </tr>
  <tr>
    <td>`touch`</td>
    <td>Access or create a file or directory.</td>
  </tr>
  <tr>
    <td>`rmdir`</td>
    <td>Remove (delete) a directory</td>
  </tr>
  <tr>
    <td>`rm`</td>
    <td>Remove (delete) a file or a directory - using the `-r` option</td>
  </tr>
</table>
\
- Let us use these in turn to understand them better...


## `mv`
- A command to move a file or directory (can be used to rename)
- The following would rename the file/directory '`test`' to '`test_renamed`'
```{.bash code-line-numbers=false}
[user@host ~]$ mv test test_renamed
```
- Moving an important hidden file or directory could make be bad!
- A move can usually be reversed, but it is possible to lose things once they are moved around!


## `cp`
- A command to copy a file or directory
- If `test` is a file the following would make a copy named `test_copy`.
```{.bash code-line-numbers=false}
[user@host ~]$ cp test test_copy
```
- If `test` is a directory a warning would be printed:
```{.bash code-line-numbers=false}
[user@host ~]$ cp test test_copy
cp: omitting directory 'test'
```
- The '`-r`' option is used to copy a directory
```{.bash code-line-numbers=false}
[user@host ~]$ cp -r test test_copy
```


## `touch`, `>`, `>>` {.smaller}
- `touch` is a command that touches a file or directory and can be used to create a file.
  - This changes the recorded time an existing file or directory was last accessed.
```{.bash code-line-numbers=false}
[user@host ~]$ touch test
```
- the symbol '`>`' can be used to direct the standard output to a file.
  - This will overwrite any existing file.
```{.bash code-line-numbers=false}
[user@host ~]$ ls -al > listing_file
```
- '`>>`' can be used in place of '`>`' to direct the standard output to a file appending to any exising file.


## `rmdir` {.smaller}
- A command to remove (delete) a directory.
```{.bash code-line-numbers=false}
[user@host ~]$ rmdir test
```
- It will only remove the directory if it is empty.
- If the directory is not empty, there will be a warning and the directory is not deleted.
```{.bash code-line-numbers=false}
[user@host ~]$ rmdir test
rmdir: failed to remove 'test': Directory not empty
```
- If the user does not have permission to delete the directory, a warning is printed.


## `rm` {.smaller}
- A command to remove (delete) a file or directory.
- The following will remove a file called '`test`':
```{.bash code-line-numbers=false}
[user@host ~]$ rm test
```
- To delete a directory and all contents the '`-r`' option can be used.
- The '`-i`' option allows for interactivity on what to delete.
- The '`-f`' option forces.
  - Use with care, especially if combined with '`-r`'.


## `mv`, `cp`, `rmdir`, `rm`, `touch`, `>`, `>>` demo {.smaller}


## `mv`, `cp`, `rmdir`, `rm` exercise {.smaller}
- Practice creating, copying, moving and deleting files and directories.
- Be careful not to mess or lose your hidden files and folders.


## More commands {.smaller}

[ARC Documentation Helpful Shell Commands]({{< var rc.commands >}})

 <table>
  <tr>
    <th>Command</th>
    <th>Description</th>
  </tr>
  <tr>
    <td>head</td>
    <td>Show the first lines of a file (default 10)</td>
  </tr>
  <tr>
    <td>tail</td>
    <td>Show the last lines of a file (default 10)</td>
  </tr>
  <tr>
    <td>less</td>
    <td>Open into a paginated reader view</td>
  </tr>
  <tr>
    <td>cat</td>
    <td>Concatenate and print to terminal (via standard output)</td>
  </tr>
</table> 


## Visibility and Permissions 1/7

File permissions can be identified using the `ls` command with the `-l` option.
\
Directory and filenames starting with a `.` are hidden.
\
To see these with the `ls` command use the `-a` option.
\
A directory named `test0` containing a directory called `test` containing a file called `test-file` can be created as follows:

```{.bash code-line-numbers=false}
[user@host]$ mkdir test0
[user@host]$ mkdir test0/test
[user@host]$ touch test0/test/test-file
```


## Visibility and Permissions 2/7

By default, the owner has read, write and execute permissions on a directory they create, and read and write (but not execute) permission on a file they create.
\
By default, group and all have no permissions.

```{.bash code-line-numbers=false}
[user@host]$ ls -la test0/test
drwx------ 2 <owner> <group> <size> <date> <time> .
drwx------ 3 <owner> <group> <size> <date> <time> ..
-rw------- 1 <owner> <group> <size> <date> <time> test-file
```


## Visibility and Permissions 3/7
```
-rw------- 1 <owner> <group> <size> <date> <time> test-file
     |     |    |       |       |      |      |
     |     |    |       |       |      |      +----> time last modified
     |     |    |       |       |      +-----------> date last modified
     |     |    |       |       +------------------> size in bytes
     |     |    |       +--------------------------> group assignment
     |     |    +----------------------------------> owner username
     |     +---------------------------------------> number of hard link
     +---------------------------------------------> type and permissions
```

```
-rw-------
| |  |  |
| |  |  +----> all user permissions (3 characters)
| |  +-------> group user permissions (3 characters)
| +----------> owner permissions (3 characters)
+------------> type (1 character)
```

## Visibility and Permissions 4/7

### Type and permissions examples

```drwx------```:
\
- type: directory
\
- owner permissions: read, write and execute
\
- group user permissions: read and execute
\
- all user permissions: read only
\

```-rw-------```:
\
- type: file
\
- owner permissions: read and write
\
- group user permissions: none
\
- all user permissions: none


## Visibility and Permissions 5/7

Each system user is assigned to one or more groups.
\
A user can change the group assignment to other groups they belong to.

\
Group assignment and permissions may be changed respectively with the commands `chgrp` and `chmod`.

\
The command `groups` can be used to print out what groups there are, and what group a user is part of.

\
There are a couple of main ways to change permissions...


## Visibility and Permissions 6/7

```{.bash code-line-numbers=false}
[user@host]$ chmod u+rwx,g+rx,a+r test0/test/test-file
[user@host]$ ls -al test0/test/test-file
-rwxr-xr-- 1 <owner> <group> <size> <date> <time> test-file
```

\
`u+rwx` sets owner permissions to read, write and execute 
\
`g+rx` sets group user permissions to read and execute 
\
`a+r` sets all user permissions to read only 


## Visibility and Permissions 7/7

This can also be achieved with octal values.
\
The octal value (0-7) is calculated by adding up the values for each digit
\
User (rwx) = 4+2+1 = 7
\
Group(rx) = 4+1 = 5
\
World (r) = 4

```{.bash code-line-numbers=false}
[user@host]$ chmod u+rwx,g+r test0/test/test-file
-rwxr----- 1 <owner> <group> <size> <date> <time> test-file
[user@host]$ chmod 754 test0/test/test-file
[user@host]$ ls -al test0/test/test-file
-rwxr-xr-- 1 <owner> <group> <size> <date> <time> test-file
```



In yourCreate a new directory called 'test' containing a new file called 'test-file'. Set the permissions on 'test-file' to be:
\
- owner permissions: read, write and execute
\
- group permissions: read only
\
- all permissions: none

Hints:
\
- `mkdir` make a directory
\
- `cd` change into a directory
\
- `touch` can be used to create a new empty file
\
- `chmod` modify permissions
\
- `ls -l` to list and see permission details

### Solution

```{.bash code-line-numbers=false}
[user@host ~]$ mkdir test
[user@host ~]$ touch test/test-file
[user@host ~]$ ls -l test/test-file
-rw------- 1 <owner> <group> <size> <date> <time> test/test-file
[user@host ~]$ chmod u+rwx,g+r test-file
[user@host ~]$ ls -l test/test-file
-rwxr----- 1 <owner> <group> <size> <date> <time> test/test-file
```

\
Alternatively octal numbers could be used:

```{.bash code-line-numbers=false}
[user@host ~]$ mkdir test
[user@host ~]$ touch test/test-file
[user@host ~]$ chmod 740 test-file
```

:::

## Exercise 2 {.smaller}

::: {.panel-tabset}

### Problem

Create a new directory called 'test' containing a new file called 'test-file'. Set the permissions on 'test-file' to be:
\
- owner permissions: read, write and execute
\
- group permissions: read only
\
- all permissions: none

Hints:
\
- `mkdir` make a directory
\
- `cd` change into a directory
\
- `touch` can be used to create a new empty file
\
- `chmod` modify permissions
\
- `ls -l` to list and see permission details

### Solution

```{.bash code-line-numbers=false}
[user@host ~]$ mkdir test
[user@host ~]$ touch test/test-file
[user@host ~]$ ls -l test/test-file
-rw------- 1 <owner> <group> <size> <date> <time> test/test-file
[user@host ~]$ chmod u+rwx,g+r test-file
[user@host ~]$ ls -l test/test-file
-rwxr----- 1 <owner> <group> <size> <date> <time> test/test-file
```

\
Alternatively octal numbers could be used:

```{.bash code-line-numbers=false}
[user@host ~]$ mkdir test
[user@host ~]$ touch test/test-file
[user@host ~]$ chmod 740 test-file
```

:::


## Exercise 3

Get a copy of some data using the following `git` command:

```{.bash code-line-numbers=false}
git clone https://github.com/ARCTraining/shell-training/
```

\
Change directory into the directory called 'shell-training'. List the directory contents.


## sort and cut

- The `sort` command will sort lines (by default alphabetically).

\

- The `cut` command will cut lines of text based on a given character
e.g. `cut -d ',' -f 2` will split lines around the comma and yield the second part.


## Exercise 4 {.smaller}

::: {.panel-tabset}

### Problem

Combine `cat`, `cut`, and `sort` to print out the Latin names from the file `IOM-animals/birds.txt` in alphabetical order. Save the output to a new file.

### Solution

```{.bash code-line-numbers=false}
[user@host IOM-animals]$ cat birds.txt | sort | cut -d ',' -f 2 > sorted-birds.txt
```

\
Another option to achieve the same is to use the `awk` command instead of `cut`:

```{.bash code-line-numbers=false}
[user@host IOM-animals]$ cat birds.txt | sort | awk '{FS=","}{print $2}' > sorted-birds.txt
```
\
`awk` is a program command tool. It allows for setting field seperators of multiple characters, whereas `cut` is restricted to a single character field seperator. 
\

The `{FS=","}` part of the `awk` command sets the field seperator to a comma, to set as a space followed by a comma use `{FS=" ,"}`

:::


## Exercise 5 {.smaller}

::: {.panel-tabset}

### Problem

List all the lines in the files in `IOM-animals` directory alphabetically and find the `50th` item.

### Solution

Use `head` to get the first 50 lines and `pipe it` to `tail` to get the last one:

```{.bash code-line-numbers=false}
[user@host IOM-animals]$ sort *.txt | head -n 50 | tail -n 1
coot, fulica atra
```

\
Another option is to use the `sed` command instead of `head` and `tail`:
```{.bash code-line-numbers=false}
[user@host IOM-animals]$ sort *.txt | sed -n 50p
coot, fulica atra
```
\
`sed` is a program command tool for stream editing. Figuring out the `sed` options that work is not so easy! 

:::


## sed 1/2

`sed` reads an input stream and produces an output stream. Internally it has a pattern space and a hold buffer. Data is read from the input stream until the next newline character and placed into the pattern space. Most sed commands operate on the data in the pattern space. Data can be exchanged between the pattern space and the hold buffer. Once sed has executed all commands, it outputs the pattern space and adds a newline characer at the end.


## sed 2/2

A very simple `sed` program:
```
sed 's/foo/bar/'
```
\
This program replaces all instance of 'foo' with 'bar' on every line.

\
Beware of `sed` commands as they can modify a file. 


## grep

`grep` will print all lines containing or not containing a string of characters. The following will stream out all input lines containing 'foo':
\
```
grep foo
```
\

The following will stream out all input lines not containing 'foo':
\
```
grep -v foo
```


## Exercise 6 {.smaller}

::: {.panel-tabset}

### Problem

`shell-training/data/` contains 300 data files, each of which should contain 100 values. One or more of these files are missing some data though...

\
Use a series of commands connected by pipes to identify which files have missing data. Hints:

- `wc -w` will tell you the number of values in a file
- `sort -n` will sort numerically

### Solution

A solution using `grep`:
```{.bash code-line-numbers=false}
[user@host data]$ wc -w values* | sort -n | grep -v '100 values'
    99 values 44
 29899 total
```

\
Alternatively `awk` could be used:
```{.bash code-line-numbers=false}
[user@host data]$ wc -w values* | sort -n | awk '$1 != 100 {print $0}'
    99 values 44
 29899 total
```

:::


## For loops

Example for loop to print the numbers 1, 3 and 5:

```{.bash code-line-numbers=false}
[user@host ~]$ for ((i=1;i<6;i=i+2)) do echo $i; done
1
3
5
```
\
`echo` is a command that prints to the standard output.
The variable `i` is initialised with a value of `1`; the loop continues until the condition `i` is less than `6`; each iteration of the loop `i` is incremented by `2`.


## Sequences

Example sequence to print the numbers 1, 3 and 5:

```{.bash code-line-numbers=false}
[user@host ~]$ for i in {1..5..2}; do echo $i; done
1
3
5
```
\
The sequence variable `i` starts at `1` and ends at `5` and steps by `2`.
A sequence could be the items in a directory or other things.


## Exercise 7 {.smaller}

::: {.panel-tabset}

### Problem

1. Use a for loop to create five directories called `calculation_?`, where `?` is a number. 
2. Use a sequence to create five directories, each one the parent of the next.

### Solutions

1. `i++` is shorthand for 'i=i+1'
```{.bash code-line-numbers=false}
[user@host ~]$ for ((i=1;i<6;i++))
> do
> mkdir calculation_$i
> done
[user@host ~]$
```
\
2. Two commands are executed in each loop. A new directory is created and then the working directory is changed to the new directory. On the next iteration, the new directory is then created inside the previous one.
```{.bash code-line-numbers=false}
[user@host ~]$ for i in {1..5}; do
> mkdir calculation_$i
> cd calculation_$i
> done
[user@host calculation_5]$
```

:::

## Exercise 8 {.smaller}

::: {.panel-tabset}

### Problem

Print out the first line of each file in the `wildcards` directory.

### Solution

```{.bash code-line-numbers=false}
[user@host wildcards]$ for f in *.txt
> do
> head -n 1 $f
> done
```

:::


## Exercise 9 {.smaller}

::: {.panel-tabset}

### Problem

What will this command print to the screen?

```{.bash code-line-numbers=false}
[user@host wildcards]$ for f in *.txt
> do
> echo $f
> cat $f > new-file.txt
> done
```

\
What will the contents of `new-file.txt` be and why?

### Solution

- The command will print the name of each `.txt` file in the current directory
- On each iteration the `echo` command prints a different file name

- The content of `new-file.txt` will be the same as `xyz.txt`
- On each iteration the contents of a different file are written to `new-file.txt`, overwriting whatever was written on the previous iteration
- This is because `>` overwrites the output of cat to `new-file.txt` for each element in the sequence.
- Using `>>` instead would result in each file's content being appended to the end of `new-file.txt`

:::


## Shell Scripts

These are simple text files. By convention the filename ends `.sh`.
The file should start with a `shebang` line which tells the Linux system what command to run:

`#!/bin/bash`

\
After the `shebang`, simply enter all the commands for the script.

To run the script it must have executable permissions.


## Exercise 10 {.smaller}

Create and run a shell script to print out the first line of each file in a directory. Test using the wildcards directory.

\
Hint: Use the `history` command to see the commands you executed. You could pipe this into tail and direct it into a file and than use the `nano` - a text editor to modify this into a script. Remember to modify the file permissions so you can execute the file. To execute a script called `script.sh` issue the following command:

```{.bash code-line-numbers=false}
[user@host wildcards]$ sh script.sh
```

{{< include _end.qmd >}}
