[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "arctraining slides",
    "section": "",
    "text": "Public facing homepage for arctraining Quarto slides collection."
  },
  {
    "objectID": "index.html#slides",
    "href": "index.html#slides",
    "title": "arctraining slides",
    "section": "Slides:",
    "text": "Slides:\nNote: this page is under construction. As soon as the slides are available, the link will be provided.\n\nHPC0: Introduction to Linux for HPC\nHPC1: Introduction to High Performance Computing\nHPC2: Applications and containers on HPC\nHPC3: Computer architectures and shared memory parallel programming\nHPC5: Introduction to GPU programming with CUDA\nHPC6: HPC for Life Sciences and Bioinformatics\nSWD1a: Introduction to Python programming\nSWD1b: Introduction to R programming\nSWD2: Version Control with Git and GitHub\nSWD3: Software development practices for Research\nSWD4: Cloud computing for Research\nSWD5: Scientific Python\nSWD6: High performance Python\nSWD7: Introduction to reproducible workflows in Python"
  },
  {
    "objectID": "swd3/sdlc.html#sdlc",
    "href": "swd3/sdlc.html#sdlc",
    "title": "arctraining slides",
    "section": "SDLC",
    "text": "SDLC\n\nIdeationRequirementsDesignDevelopmentTestDeploymentMaintenance\n\n\n\n\n\nWhat are we going to do?\n\n\nBrainstorming\nResearch\n\n\n\n\n\n\n\n\n\n\nHow are we going to do it?\n\nSome topics to help define requirements include:\n\nfinal goal\nproject scope (how to reach the final goal)\nwhat is feasible (and how)\nwhat is priority\nwhat resources are available\ndeadlines\npotential risks\n\n\nWarning: Each person involved in the project may have a different need.\n\n\n\n\n\n\n\n\n\n\nWhat is the software architecture?\n\nWhen designing software, the object-oriented approach is a common programming paradigm.\nObject-oriented components:\n\nClasses: A user-defined type\nObject instances: A particular object instantiated from a class.\nMethods: A function which is “built in” to a class\nConstructor: A special method called when instantiating a new object\n\nSome principles: abstraction, encapsulation, decomposition, generalisation\n\n\nSee more: \n\n\n\n\n\n\n\nIs this where the fun begins?\n\n\nTake your time\n\n\n\n\n\nDevelopment is usually the most time consuming step in a Software Development Life Cycle.\n\n\n\n\n\nIs this software good?\n\nIn this step, errors and failures are identified by exposing the code to an environment similar to the end-user experience.\nThere are several types of testing, some examples include:\n\nUnit testing: are all components working?\nIntegration testing: are all components working when fitted together?\nPerformance testing: how does the software perform against different workloads? It is fast? Stable?\nFunctional testing: is the software aligned with Software Requirement Specification?\n\n\n\n\n\n\n\n\n\n\nCan other people use my code?\n\nYou can use platforms like GitHub to release your software.\n\nThe functionality of the software is linked to several specifications related to the operating system and versions of packages and other software related to the project.\nListing these specifications will help others to replicate the environment in which the software was developed.\n\n\n\n\n\n\n\n\n\n\nIs it over?\n\nWe can classify maintenance into a few categories:\n\nCorrective: fix reported errors/failures.\nPreventive: regular checks and fixes.\nPerfective: optimize implemented features, adding new features.\nAdaptive: keep the software updated according to changes external to the project (new programming language version, new regulation, etc.)."
  },
  {
    "objectID": "swd3/project.html",
    "href": "swd3/project.html",
    "title": "arctraining slides",
    "section": "",
    "text": "Calculating the hypotenuse\n\\[ c = \\sqrt{a^2 + b^2} \\]\nGeneral Design\n\n1 squared function\n1 sum function\n1 square root function\n1 hypotenuse function that uses the other functions"
  },
  {
    "objectID": "swd3/project.html#bringing-it-all-together",
    "href": "swd3/project.html#bringing-it-all-together",
    "title": "arctraining slides",
    "section": "",
    "text": "Calculating the hypotenuse\n\\[ c = \\sqrt{a^2 + b^2} \\]\nGeneral Design\n\n1 squared function\n1 sum function\n1 square root function\n1 hypotenuse function that uses the other functions"
  },
  {
    "objectID": "swd3/project.html#workflow",
    "href": "swd3/project.html#workflow",
    "title": "arctraining slides",
    "section": "Workflow",
    "text": "Workflow\n\nInstall Git, Anaconda, VScode\nCreate a GitHub repository + Licence + .gitignore + Readme\nSetup GH Action for testing (Python Application)\nClone GH repository in local machine\nCreate project structure (source and test folders)\nSetup tests (start with test_)\nDevelop code\nAdd docstring (you can use autoDocstring - Python Docstring Generator on VS Code)\nLint code and tests\nPush to github\nEXTRA: Create Sphinx documentation\nEXTRA: Setup file and local install\nEXTRA: GH Release"
  },
  {
    "objectID": "swd3/project.html#extra-sphinx-documentation",
    "href": "swd3/project.html#extra-sphinx-documentation",
    "title": "arctraining slides",
    "section": "Extra: Sphinx documentation",
    "text": "Extra: Sphinx documentation\n\nCreate docstring for every function\nInstall sphinx\nStart the basic structure using: $ sphinx-quickstart docs\nUse the apidoc to get docstrings: $ sphinx-apidoc -o docs .\nEdit files:\n\n\nconf.pyindex.rstdependencies.rstusage.rstfunctions.rst\n\n\n\nadd extentions: 'sphinx.ext.todo', 'sphinx.ext.viewcode', 'sphinx.ext.autodoc'.\nchange theme: sphinx_rtd_theme\nadd the src (change the folder name as necessary!) folder as path:\n\n import os\n import sys\n sys.path.insert(0, os.path.abspath('../src'))\n\n\nAdd extra files after Contents\n.. toctree::\n   :maxdepth: 2\n   :caption: Contents:\n\n   dependencies\n   usage\n   functions\n\n\nList all your dependencies:\nDependencies\n============\n\n- python\n- pytest\n- flake8\n- black\n- sphinx\n\n\nExplain how to use your software\nUsage Guide\n============\n\nTo start working with this repository you need to clone it onto your local\nmachine: ::\n\n    $ git clone https://github.com/...\n\n\nNext ...\n\n\nCreate a function file with the following:\nAPI reference\n=============\n\n.. automodule:: calc\n   :members:\n   :undoc-members:\n   :show-inheritance:"
  },
  {
    "objectID": "swd3/project.html#extra-documentation-action",
    "href": "swd3/project.html#extra-documentation-action",
    "title": "arctraining slides",
    "section": "Extra: documentation Action",
    "text": "Extra: documentation Action\nCreate a new GH action to create a nice website for your documentation.\n\nThe action is available here\nYou may need update GH Actions permissions to allow write\nAfter a successful documentation action, you need to select gh-pages branch to activate your website"
  },
  {
    "objectID": "swd3/project.html#extra-setup-file",
    "href": "swd3/project.html#extra-setup-file",
    "title": "arctraining slides",
    "section": "Extra: Setup file",
    "text": "Extra: Setup file\nCreate a setup.py file like:\nimport setuptools\n\nwith open(\"README.md\", \"r\") as fh:\n    long_description = fh.read()\n\nsetuptools.setup(\n    name=\"hypot\",\n    version=\"0.1.0\",\n    author=\"Patricia Ternes\",\n    author_email=\"p.ternesdallagnollo@leeds.ac.uk\",\n    description=\"The hypot SWD3 demo package\",\n    packages=setuptools.find_packages(),\n    classifiers=[\n        \"Programming Language :: Python :: 3.9\",\n        \"Intended Audience :: Science/Research/Learning\",\n    ],\n    python_requires=\"&gt;=3.9\",\n)"
  },
  {
    "objectID": "swd3/project.html#local-installation",
    "href": "swd3/project.html#local-installation",
    "title": "arctraining slides",
    "section": "Local Installation",
    "text": "Local Installation\nInstall: install the hypot package into the environment using:\n$ python setup.py install\nUsage: if you want to create a personalised script, you can import the hypot modules as follows:\nfrom hypot.calc import squared, addition, sqroot\nRemove: If you want to remove your package, use pip:\n$ pip uninstall hypot"
  },
  {
    "objectID": "swd3/project.html#release",
    "href": "swd3/project.html#release",
    "title": "arctraining slides",
    "section": "Release",
    "text": "Release\nRelease in GitHub are based in tags with the following structure:\nv0.5.2\n\n\n\nChange\nRelease\nExample\n\n\n\n\nMajor\nBreaking\n0\n\n\nMinor\nFeature\n5\n\n\nPatch\nFix\n2"
  },
  {
    "objectID": "donut.html#presentation-set-up-guide",
    "href": "donut.html#presentation-set-up-guide",
    "title": "arctraining slides",
    "section": "Presentation set up guide",
    "text": "Presentation set up guide\n\nShare the Web browser window containing the slides (‘Slide View’).\nActivate ‘Speaker View’:\n\nFrom the slide-menu-button (bars in the lower left), select:\n\nTools (at the top) &gt;&gt; Speaker View (from the list).\n\n\nA new Web browser window should open showing the ‘Speaker View’.\n\nLocate this and read the Notes Pane (lower right).\n\n\n\n\nThe default Speaker View layout has three panes:\n\nSlide Pane (left) shows the current slide.\nNotes Pane (lower right) are these notes.\nUpcoming Pane (upper right).\n\nThis should show the next slide.\nLayout: Default can be actioned to change the Layout.\n\n\nThe current slide in Slide View and in the Speaker View Slide Pane should synchronise:\n\nSo changing slide in one should do the same in the other.\n\nMove on to the next slide - the Title Slide:\n\nUse the down or right keyboard cursor keys or activate the controls-arrow that looks like &gt; in the lower right &gt;- If you have activated the Upcoming Pane the keyboard cursor keys will change what is in there.\nTo move on in the presentation, activate (click back into) the main Slide Pane."
  },
  {
    "objectID": "donut.html#meta-code",
    "href": "donut.html#meta-code",
    "title": "arctraining slides",
    "section": "Donut",
    "text": "Donut\nA Guide to delivering Presentations Using Quarto"
  },
  {
    "objectID": "donut.html#research-computing-team-and-service",
    "href": "donut.html#research-computing-team-and-service",
    "title": "arctraining slides",
    "section": "Research Computing Team and Service",
    "text": "Research Computing Team and Service\n\n\nHere to support research(ers)\n\nProvide training\nSupport users of Grid and Cloud Computing platforms\nProvide consultancy\n\nTo develop project proposals\nTo help recruit people with specialist skills\nWorking directly on research projects\n\n\nFor details please see our Website\nContact us via the IT Service Desk\n\n\n\nIf you follow a link then a new tab will open in the Slide View Web browser.\n\nThis will want closing or the Slide View activating again as he main tab in the browser.\n\nMaybe point out some sections/features on the Research Computing Website.\nWe support use and develop resources."
  },
  {
    "objectID": "donut.html#polls-and-forms",
    "href": "donut.html#polls-and-forms",
    "title": "arctraining slides",
    "section": "Polls and Forms",
    "text": "Polls and Forms\n\nPolls are best prepared in advance.\n\nThere are two main types of Poll:\n\n“Emoji Polls”\n“Forms Polls”"
  },
  {
    "objectID": "donut.html#emoji-polls",
    "href": "donut.html#emoji-polls",
    "title": "arctraining slides",
    "section": "Emoji Polls",
    "text": "Emoji Polls\n\nConducted from within Teams chat\nCopy the following and then press the space bar after each end parenthesis ) to turn the text into an emoji:\nDo you like emoji polls?\n(thumbsup) yes\n(heart) no\nThe thumbsup and heart emojis are the first two emojis that are in the reaction list of users by default."
  },
  {
    "objectID": "donut.html#forms-polls",
    "href": "donut.html#forms-polls",
    "title": "arctraining slides",
    "section": "Forms Polls",
    "text": "Forms Polls\n\nA Forms poll can be added ad hoc in a Teams chat:\n\nSelect the three dots ... below the message box and then search for or add Forms.\nOr add using the + option at the top of the chat.\n\nHowever, this use of Forms is being phased out in preference for a Polls App.\nThe Polls App however, is not available in the University of Leeds Office 365 offerring currently to test and the version that can be used in the chat does not seem to have an easy way to collect the results!\nIt might be best to prepare some Forms forms in advance using the Forms in Office 365 (https://www.microsoft365.com/launch/forms).\n\nSharing these simply involves copying the URL and pasting it into the chat.\n\nFor example: https://forms.office.com/pages/designpagev2.aspx?lang=en-GB&origin=OfficeDotCom&route=Start&subpage=design&id=qO3qvR3IzkWGPlIypTW3yy7GBfs2qsFOjWB83KLaHnVUNzFZS1VCTENOVEJUMDdKVEEyNURDRlY2USQlQCN0PWcu"
  },
  {
    "objectID": "donut.html#hackpads-or-forms",
    "href": "donut.html#hackpads-or-forms",
    "title": "arctraining slides",
    "section": "Hackpads or Forms",
    "text": "Hackpads or Forms\n\nThese can be used for participants to introduce themselves to us.\nParticipants should have all the links already in an email."
  },
  {
    "objectID": "donut.html#feedback-and-questions",
    "href": "donut.html#feedback-and-questions",
    "title": "arctraining slides",
    "section": "Feedback and questions",
    "text": "Feedback and questions\n\nPlease encourage interruptions especially for participants having difficulty hearing or following the presentation…\nPeriodically pause and ask if participants have any questions or want anything repeated…"
  },
  {
    "objectID": "donut.html#getting-feedback",
    "href": "donut.html#getting-feedback",
    "title": "arctraining slides",
    "section": "Getting Feedback",
    "text": "Getting Feedback\n\nPlease encourage participants to provide honest feedback about presentations and the training so we can improve.\n\n\n\nResearch IT Website | Research IT Query | Courses Material"
  },
  {
    "objectID": "datavis01.html#meta-code",
    "href": "datavis01.html#meta-code",
    "title": "arctraining slides",
    "section": "DataVis 101",
    "text": "DataVis 101\nIntroduction to Data Visualisation with Python"
  },
  {
    "objectID": "datavis01.html#research-computing-team-and-service",
    "href": "datavis01.html#research-computing-team-and-service",
    "title": "arctraining slides",
    "section": "Research Computing Team and Service",
    "text": "Research Computing Team and Service\n\n\nHere to support research(ers)\n\nProvide training\nSupport users of Grid and Cloud Computing platforms\nProvide consultancy\n\nTo develop project proposals\nTo help recruit people with specialist skills\nWorking directly on research projects\n\n\nFor details please see our Website\nContact us via the IT Service Desk\n\n\n\nIf you follow a link then a new tab will open in the Slide View Web browser.\n\nThis will want closing or the Slide View activating again as he main tab in the browser.\n\nMaybe point out some sections/features on the Research Computing Website.\nWe support use and develop resources."
  },
  {
    "objectID": "datavis01.html#course-objectives",
    "href": "datavis01.html#course-objectives",
    "title": "arctraining slides",
    "section": "Course objectives",
    "text": "Course objectives\nThis course should help you to:\n\nBecome familiar with best practice with regards to scientific data visualisation\nBuild a toolkit of resources to help you create objective, informative plots\nUse Python and Python libraries such as Matplotlib and Seaborn to create aesthetically pleasing graphics\nBe aware of some common issues when it comes to data visualisation"
  },
  {
    "objectID": "datavis01.html#documentation",
    "href": "datavis01.html#documentation",
    "title": "arctraining slides",
    "section": "Documentation",
    "text": "Documentation\n\nCourse notes\nThese slides: https://arctraining.github.io/rc-slides/datavis\nHackpad"
  },
  {
    "objectID": "datavis01.html#section",
    "href": "datavis01.html#section",
    "title": "arctraining slides",
    "section": "",
    "text": "What is PythonWhat is Data Visualisation\n\n\n\nA flexible, human-readable programming language with simple “syntax”\nIt is commonly used for:\n\ndata analytics\nscientific programming\nvisualisation\n\nIt has a huge collection of specialised libraries to solve specific research problems\nIt is Open Source\n\n\n\n\nA way of graphically representing data\nCan include plots, graphs, charts, schematics, maps, infographics\nCommonly found in research papers, publications, policy documents, on conference posters, in talks, on news reports…"
  },
  {
    "objectID": "datavis01.html#why-do-you-want-to-learn-data-vis-or-python",
    "href": "datavis01.html#why-do-you-want-to-learn-data-vis-or-python",
    "title": "arctraining slides",
    "section": "Why do you want to learn data vis or Python?",
    "text": "Why do you want to learn data vis or Python?\nAdd a line to the hackpad!\n\nWhat’s your name and role?\nWhat department or research group are you in?\nWhat are you hoping to learn?"
  },
  {
    "objectID": "datavis01.html#some-examples",
    "href": "datavis01.html#some-examples",
    "title": "arctraining slides",
    "section": "Some examples",
    "text": "Some examples\n\nCalculate internal gravity and pressure in planetesimals"
  },
  {
    "objectID": "datavis01.html#section-1",
    "href": "datavis01.html#section-1",
    "title": "arctraining slides",
    "section": "",
    "text": "Estimate subsidence of volcanic edifices on planets"
  },
  {
    "objectID": "datavis01.html#section-2",
    "href": "datavis01.html#section-2",
    "title": "arctraining slides",
    "section": "",
    "text": "Map faults on the surface of Mars"
  },
  {
    "objectID": "datavis01.html#section-3",
    "href": "datavis01.html#section-3",
    "title": "arctraining slides",
    "section": "",
    "text": "Map faults on the surface of Mars"
  },
  {
    "objectID": "datavis01.html#section-4",
    "href": "datavis01.html#section-4",
    "title": "arctraining slides",
    "section": "",
    "text": "Map faults on the surface of Mars"
  },
  {
    "objectID": "datavis01.html#section-5",
    "href": "datavis01.html#section-5",
    "title": "arctraining slides",
    "section": "",
    "text": "Model the thermal evolution of meteorite parent bodies"
  },
  {
    "objectID": "datavis01.html#section-6",
    "href": "datavis01.html#section-6",
    "title": "arctraining slides",
    "section": "",
    "text": "Plot and analyse x-ray element maps"
  },
  {
    "objectID": "datavis01.html#aims-for-this-section",
    "href": "datavis01.html#aims-for-this-section",
    "title": "arctraining slides",
    "section": "Aims for this section",
    "text": "Aims for this section\nBy the end of this section, you should…\n\nBe able to recognise possible issues with scientific figures and be able to critically evaluate data visualisations\nHave a framework to build useful, objective figures to illustrate your results\nHave resources to further investigate different aspects of scientific figure making\n\nSource material: Ten Simple Rules for Better Figures by Rougier, Droettboom and Bourne, 2014"
  },
  {
    "objectID": "datavis01.html#rule-1-know-your-audience",
    "href": "datavis01.html#rule-1-know-your-audience",
    "title": "arctraining slides",
    "section": "Rule 1: Know Your Audience",
    "text": "Rule 1: Know Your Audience\nWho will be reading it, in what context?\n\n\n\nYou\nYour supervisor(s)\nGeneral scientific or research audience\nExperts in your field\nExperts in a specific method you use\nThe general public\nPolicy makers\nUndergraduate students\n\n\n\nScientific journal\nA general lecture on a research area\nAn outreach event\nUpdating funders\nFunding application\nThesis examiners"
  },
  {
    "objectID": "datavis01.html#rule-2-identify-your-message",
    "href": "datavis01.html#rule-2-identify-your-message",
    "title": "arctraining slides",
    "section": "Rule 2: Identify Your Message",
    "text": "Rule 2: Identify Your Message\n\nThe figure should express an idea quickly and succinctly\nIt’s important to know exactly what the message of the figure is\nPart of this is ensuring you know what the message is\n\nPeople can get stuck knowing they “need to make a figure for this chunk of results” but are not sure what they actually need to convey"
  },
  {
    "objectID": "datavis01.html#browsing-documentation-galleries-can-be-a-good-idea",
    "href": "datavis01.html#browsing-documentation-galleries-can-be-a-good-idea",
    "title": "arctraining slides",
    "section": "Browsing documentation galleries can be a good idea…",
    "text": "Browsing documentation galleries can be a good idea…\n\nMatplotlib “Plot Types” gallery\nMatplotlib general gallery\nSeaborn example gallery\nPandas chart visualisation guide\n\nAlso, check and see what other researchers in your field are using…"
  },
  {
    "objectID": "datavis01.html#rule-3-adapt-the-figure-to-the-support-medium",
    "href": "datavis01.html#rule-3-adapt-the-figure-to-the-support-medium",
    "title": "arctraining slides",
    "section": "Rule 3: Adapt the Figure to the Support Medium",
    "text": "Rule 3: Adapt the Figure to the Support Medium\n\nUnderstand what medium the figure will be displayed in\nAdapt the figure appropriately\nRelated to Rule 1: Know Your Audience but more focus on physical medium:\n\nProjected on a screen?\nHigh resolution printed poster?\nJournal article read online and zoomable?\nLikely to be printed out in greyscale?"
  },
  {
    "objectID": "datavis01.html#rule-4-captions-are-not-optional",
    "href": "datavis01.html#rule-4-captions-are-not-optional",
    "title": "arctraining slides",
    "section": "Rule 4: Captions Are Not Optional",
    "text": "Rule 4: Captions Are Not Optional\n\nCaptions provide additional context for the figure\nThey help the reader to interpret the figure correctly\nThey should be treated like axes labels, a legend… e.g. essential!"
  },
  {
    "objectID": "datavis01.html#rule-5-do-not-trust-the-defaults",
    "href": "datavis01.html#rule-5-do-not-trust-the-defaults",
    "title": "arctraining slides",
    "section": "Rule 5: Do Not Trust the Defaults",
    "text": "Rule 5: Do Not Trust the Defaults\n\nDefault settings in your chosen plotting software may not suit your needs entirely\nAdjust settings as needed"
  },
  {
    "objectID": "datavis01.html#rule-6-use-colour-effectively",
    "href": "datavis01.html#rule-6-use-colour-effectively",
    "title": "arctraining slides",
    "section": "Rule 6: Use Colour Effectively",
    "text": "Rule 6: Use Colour Effectively\n\nColour can be an important asset in your scientific visualisations\nMust be used mindfully to avoid confusion\n\nAccording to Edward Tufte 1983, colour can be either your greatest ally or your worst enemy if not used properly (Rougier et al., 2014)."
  },
  {
    "objectID": "datavis01.html#uses-for-colour",
    "href": "datavis01.html#uses-for-colour",
    "title": "arctraining slides",
    "section": "Uses for Colour",
    "text": "Uses for Colour\n\nAdding an additional dimension to your figures\nAdding clarity to different marker or line styles\nFor emphasis\nFor heatmaps"
  },
  {
    "objectID": "datavis01.html#pitfalls-of-colour-use",
    "href": "datavis01.html#pitfalls-of-colour-use",
    "title": "arctraining slides",
    "section": "Pitfalls of Colour-Use",
    "text": "Pitfalls of Colour-Use\n\nRelying purely on colour to distinguish can cause issues with colour vision deficiencies, printing in greyscale, different screen settings\nColour maps may not accurately represent your data - non-perceptually uniform maps\n\nMatplotlib colour maps documentation -Even more in depth colour maps, with Proplot\nColour can be used to accidentally infer order where there is none"
  },
  {
    "objectID": "datavis01.html#best-practice",
    "href": "datavis01.html#best-practice",
    "title": "arctraining slides",
    "section": "Best Practice",
    "text": "Best Practice\n\nIt is a good practice to, where possible, avoid conveying information purely through color. You should always consider adding other ways to convey the same information besides just color.\nEnsure that colour does not infer order where there is none!"
  },
  {
    "objectID": "datavis01.html#further-reading",
    "href": "datavis01.html#further-reading",
    "title": "arctraining slides",
    "section": "Further Reading",
    "text": "Further Reading\n\nDesigning colour-blind-friendly visualizations\nColoring for Colorblindness\nThe misuse of colour in science communication\nScientific colour maps user guide"
  },
  {
    "objectID": "datavis01.html#rule-7-do-not-mislead-the-reader",
    "href": "datavis01.html#rule-7-do-not-mislead-the-reader",
    "title": "arctraining slides",
    "section": "Rule 7: Do Not Mislead the Reader",
    "text": "Rule 7: Do Not Mislead the Reader\n\nFigures should represent data as objectively as possible\nAvoid creating misleading figures\n\nThis seems straightforward - to make a good scientific visualisations, don’t do academic fraud - but actually, it’s easier to accidentally misrepresent data than you might think."
  },
  {
    "objectID": "datavis01.html#rule-8-avoid-chartjunk",
    "href": "datavis01.html#rule-8-avoid-chartjunk",
    "title": "arctraining slides",
    "section": "Rule 8: Avoid “Chartjunk”",
    "text": "Rule 8: Avoid “Chartjunk”\n\nChartjunk refers to all the unnecessary or confusing visual elements found in a figure\nAvoid overloading a figure with too much detail\n\nBut do:\n\nAdd enough annotations that the reader understands the figure\nUnderstand that this is subjective!\n\nIf your figure is confusing, try fixing it by removing something rather than adding extra labels!"
  },
  {
    "objectID": "datavis01.html#rule-9-message-outshines-beauty",
    "href": "datavis01.html#rule-9-message-outshines-beauty",
    "title": "arctraining slides",
    "section": "Rule 9: Message Outshines Beauty",
    "text": "Rule 9: Message Outshines Beauty\n\nThe key requirement of a scientific graphic is to communicate scientific results\nAesthetics should not distract from the message"
  },
  {
    "objectID": "datavis01.html#rule-10-get-the-right-tools",
    "href": "datavis01.html#rule-10-get-the-right-tools",
    "title": "arctraining slides",
    "section": "Rule 10: Get the Right Tool(s)",
    "text": "Rule 10: Get the Right Tool(s)\n\nUse appropriate tools for data visualisation\nScripting languages like Python and R can be more efficient for producing multiple similar plots\nWhile it is absolutely ok to use a graphics package to add annotations etc. to your plots if you are more comfortable with this, remember to always think about how reproducible your workflow is"
  },
  {
    "objectID": "hpc0.html#meta-code",
    "href": "hpc0.html#meta-code",
    "title": "arctraining slides",
    "section": "HPC 0",
    "text": "HPC 0\nIntroduction to Linux for HPC"
  },
  {
    "objectID": "hpc0.html#research-computing-team-and-service",
    "href": "hpc0.html#research-computing-team-and-service",
    "title": "arctraining slides",
    "section": "Research Computing Team and Service",
    "text": "Research Computing Team and Service\n\n\nHere to support research(ers)\n\nProvide training\nSupport users of Grid and Cloud Computing platforms\nProvide consultancy\n\nTo develop project proposals\nTo help recruit people with specialist skills\nWorking directly on research projects\n\n\nFor details please see our Website\nContact us via the IT Service Desk\n\n\n\nIf you follow a link then a new tab will open in the Slide View Web browser.\n\nThis will want closing or the Slide View activating again as he main tab in the browser.\n\nMaybe point out some sections/features on the Research Computing Website.\nWe support use and develop resources."
  },
  {
    "objectID": "hpc0.html#training-themes",
    "href": "hpc0.html#training-themes",
    "title": "arctraining slides",
    "section": "Training Themes",
    "text": "Training Themes\n\n\n“We provide training about…”"
  },
  {
    "objectID": "hpc0.html#aims-of-this-training",
    "href": "hpc0.html#aims-of-this-training",
    "title": "arctraining slides",
    "section": "Aims of this training",
    "text": "Aims of this training\n\nBuild your confidence in using command line Linux\nPrepare you for HPC1: Introduction to High Performance Computing\nGet feedback from you about the training\n\n\n\nAttempt to use Forms or Hackpad for introductions.\nEncourage interruptions and questions."
  },
  {
    "objectID": "hpc0.html#syllabus",
    "href": "hpc0.html#syllabus",
    "title": "arctraining slides",
    "section": "Syllabus",
    "text": "Syllabus\n\n\n\n\nLogging in\nEntering commands\nFinding out about commands\nFile system navigation\nCommands to list, create, copy, move and delete files\nHidden files\nCommand history\n\n\n\nControl key combinations\nEditing files\nFile permissions\nCommands to explore and filter data\nWildcards\nShell scripting basics\n\n\n\n\n\nThe plan for the next 3 hours.\nAim for 5 to 10 minute breaks roughly every 30 minutes."
  },
  {
    "objectID": "hpc0.html#logging-in",
    "href": "hpc0.html#logging-in",
    "title": "arctraining slides",
    "section": "Logging in",
    "text": "Logging in\n\nARC Documentation on Logging on\nHow you login depends on your:\n\n\n\nHost Operating System\n\nOSX/Linux:\n\nUse terminal\n\nWindows:\n\nUse MobaXTerm\n\n\n\nConnection\n\nOn campus (wireless is like ‘off campus’)\nOff campus (connected to the University VPN is like ‘on campus’)\n\n\n\n\n\nMobaXTerm is software you can download, install and run without needing help from systems administrators.\n\nIt provides a sort of bridge between your host Windows machine and other machines you connect with.\n\nMaybe conduct a poll about what host Operating Systems participants expect to use to connect to the HPC.\nIn terms of connection: On campus, but using wifi is like being ‘off campus’…\nThe University Virtual Private Network (VPN) is a type of secure network connection, enabling your computer to access the University network when working remotely."
  },
  {
    "objectID": "hpc0.html#logging-in-demos",
    "href": "hpc0.html#logging-in-demos",
    "title": "arctraining slides",
    "section": "Logging in demos",
    "text": "Logging in demos\n\n\nDemo login from OSX/Linux.\nDemo login from Windows."
  },
  {
    "objectID": "hpc0.html#logging-in-exercise",
    "href": "hpc0.html#logging-in-exercise",
    "title": "arctraining slides",
    "section": "Logging in exercise",
    "text": "Logging in exercise\n\nPlease login\n\n\n\nConduct a poll to find out who is logged on.\nOrganise help if necessary…\n\nMaybe suggest one-to-ones with helpers…\n\nThose that cannot login can still follow along for a bit…\nIs it time for a break?"
  },
  {
    "objectID": "hpc0.html#what-is-a-shell-15",
    "href": "hpc0.html#what-is-a-shell-15",
    "title": "arctraining slides",
    "section": "What is a shell? 1/5",
    "text": "What is a shell? 1/5\n\nA shell is a terminal emulator program and scripting language\nThe terminal is a window on the screen with a prompt at which textual commands are entered and where Standard Output (stdout) and Standard Error (stderr) streams get displayed\nDuring login, a user set up is finalised by reading files from the user Home Directory\nWhen logged in the user is in their Home Directory\n\n\nA terminal used to be all there was to interface between a human and the machine in early computer systems."
  },
  {
    "objectID": "hpc0.html#what-is-a-shell-25",
    "href": "hpc0.html#what-is-a-shell-25",
    "title": "arctraining slides",
    "section": "What is a shell? 2/5",
    "text": "What is a shell? 2/5\n\nBASH (bash) is a type of shell \n\n\nThe image shows what it looked like after a user issued a couple of commands in a bash."
  },
  {
    "objectID": "hpc0.html#what-is-a-shell-35",
    "href": "hpc0.html#what-is-a-shell-35",
    "title": "arctraining slides",
    "section": "What is a shell? 3/5",
    "text": "What is a shell? 3/5\n\n\n\n\nHuman users interface with the system via a shell\nA shell communicates with the kernel\nThe kernel communicates with computer hardware and provides access the filesystem\nThere are a variety of Linux kernels and shells"
  },
  {
    "objectID": "hpc0.html#what-is-a-shell-45",
    "href": "hpc0.html#what-is-a-shell-45",
    "title": "arctraining slides",
    "section": "What is a shell? 4/5",
    "text": "What is a shell? 4/5\n\nShells have built-in commands:\n\nWhen called from a shell, these run without invoking (calling) other programs\n\nShells call other programs by name, and these are looked for following a PATH\nPATH is a variable and ordered list of filesystem directories\nEach user has a PATH set upon login"
  },
  {
    "objectID": "hpc0.html#what-is-a-shell-55",
    "href": "hpc0.html#what-is-a-shell-55",
    "title": "arctraining slides",
    "section": "What is a shell? 5/5",
    "text": "What is a shell? 5/5\n\nOn HPC resources at Leeds additional Linux command utilities are available\nAdditional software has also been installed and made available via a module system\nThis is all accessed via the user shell\n\n\n\nUsing the module system is covered in HPC1."
  },
  {
    "objectID": "hpc0.html#filesystem-basics",
    "href": "hpc0.html#filesystem-basics",
    "title": "arctraining slides",
    "section": "Filesystem basics",
    "text": "Filesystem basics\n\n\n\n\nThe image shows a simplified filesystem.\nA Linux Directory is like a Windows Folder\nDirectories are arranged in a hierarchy.\n\nThe top directory is the Root Directory.\n\nLinux has symlinks where Windows has shortcuts."
  },
  {
    "objectID": "hpc0.html#forward-slash-and-back-slash",
    "href": "hpc0.html#forward-slash-and-back-slash",
    "title": "arctraining slides",
    "section": "Forward-slash / and back-slash  ",
    "text": "Forward-slash / and back-slash  \n\n\n\nThe file path separator in Linux is the forward slash.\nThe file path separator in Windows is the back slash."
  },
  {
    "objectID": "hpc0.html#absolute-path",
    "href": "hpc0.html#absolute-path",
    "title": "arctraining slides",
    "section": "Absolute path",
    "text": "Absolute path\n\n\n\nThe slide shows an absolute file path.\nThe Root Directory is referred to by a forward slash.\n\nAll absolute file paths start from the Root Directory\n\nLinux does not have drive letters like Windows."
  },
  {
    "objectID": "hpc0.html#relative-path",
    "href": "hpc0.html#relative-path",
    "title": "arctraining slides",
    "section": "Relative path",
    "text": "Relative path\n\n\n\nThe slide shows a relative file path.\n.. refers to one level up in the directory hierarchy."
  },
  {
    "objectID": "hpc0.html#the-default-prompt",
    "href": "hpc0.html#the-default-prompt",
    "title": "arctraining slides",
    "section": "The default prompt",
    "text": "The default prompt\n\nUpon login, you should see a prompt that looks like:\n\n[user@host ~]$\n\nuser should be your username\nhost should start login1. or login2. and end arc3 or arc4\nThe ~ (tilde) indicates you are in your Home Directory\nAfter the $ (dollar) is where commands are formulated and entered\n\n\n\nIs it time for a break?\nUsers can modify the prompt and set different colours and languages…"
  },
  {
    "objectID": "hpc0.html#first-commands",
    "href": "hpc0.html#first-commands",
    "title": "arctraining slides",
    "section": "First commands",
    "text": "First commands\n\n\n\nCommand\nDescription\n\n\n\n\npwd\nPrint the current working directory\n\n\nman\nLoad the manual\n\n\nls\nList the contents of a directory\n\n\nmkdir\nMake a new directory\n\n\ncd\nChange directory\n\n\n\n\n\nThe table contains safe commands\n\nThese don’t change anything.\nUsing them should not cause any damage!\n\nThese are looked at in turn."
  },
  {
    "objectID": "hpc0.html#pwd",
    "href": "hpc0.html#pwd",
    "title": "arctraining slides",
    "section": "pwd",
    "text": "pwd\n\nA command to print the working directory\n\n[user@host ~]$ pwd\n/home/homeXX/user\n\nWhen you run this the output will be slightly different:\n\nXX should be 01 or 02\nuser should be your username\n\n\n\n\npwd is pronounced pee-double-you-dee."
  },
  {
    "objectID": "hpc0.html#pwd-exercise",
    "href": "hpc0.html#pwd-exercise",
    "title": "arctraining slides",
    "section": "pwd exercise",
    "text": "pwd exercise\n\nType ‘pwd’ at the prompt by typing the letters, then press the &lt;return&gt; or &lt;enter&gt; key:\n\n[user@host ~]$ pwd\n/home/homeXX/user"
  },
  {
    "objectID": "hpc0.html#ls-14",
    "href": "hpc0.html#ls-14",
    "title": "arctraining slides",
    "section": "ls 1/4",
    "text": "ls 1/4\n\nA command to list the contents of a directory\nThere are many options for ls:\n\nThe -a option will list all the contents of a directory\n\nFiles and directories starting with . are hidden by default\n\nThe -l option will list each item line by line with added details\nThe -h option will report sizes in a more human readable format\n\n\n\n\nls is pronounced el-ess."
  },
  {
    "objectID": "hpc0.html#ls-24",
    "href": "hpc0.html#ls-24",
    "title": "arctraining slides",
    "section": "ls 2/4",
    "text": "ls 2/4\n\nOptions can be listed in any order or combined - the following are equivalent:\n\nls -al\nls -la\nls -a -l\nls -l -a"
  },
  {
    "objectID": "hpc0.html#ls-34",
    "href": "hpc0.html#ls-34",
    "title": "arctraining slides",
    "section": "ls 3/4",
    "text": "ls 3/4\n[user@host ~]$ ls -al\ntotal 8\ndrwx------     2 user group   4096 MMM DD hh:mm .\ndrwxr-xr-x     3 root root    4096 MMM DD hh:mm ..\n...\n\n\nEntering ls -al (pronounced el-ess-minus-aye-el) should usually result in something like what is shown.\nThe ... shown in the slide may be many more lines of output depending on what was listed.\nThe first line is different to the others.\n\nThe number after total is a complicated metric to do with how linked the thing being listed is.\n\nThe first part of other output lines detail permissions:\n\nPermissions and other details listed are explained later…\n\nThe last part of other output lines sre the names of the things listed.\n\n. is the directory listed.\n.. is the parent of that directory.\n\nDetails will look different to what is shown in the slide, for instance:\n\nuser: your username.”"
  },
  {
    "objectID": "hpc0.html#ls-44",
    "href": "hpc0.html#ls-44",
    "title": "arctraining slides",
    "section": "ls 4/4",
    "text": "ls 4/4\n\nThe following should result in many more lines of output:\n\n[user@host ~]$ ls -al ~\n\n\nMMM: three letters representing the month a file was created e.g. Jun.\nls -al ~ should list the details of everything in your Home Directory.\n\nIncluding any hidden files and directories…”"
  },
  {
    "objectID": "hpc0.html#ls-exercise",
    "href": "hpc0.html#ls-exercise",
    "title": "arctraining slides",
    "section": "ls exercise",
    "text": "ls exercise\n\nEnter:\n\nls /\n\nThe output should be a list of what is in the Root Directory.\nEnter:\n\nls ~\n\nThe output should be a list of everything that is in your Home Directory that is not hidden.\n\nFor new users, this is nothing - not even a README!\n\nEnter:\n\nls -al ~\n\nThe output lists everything in your Home Directory.\n\n\n\nMaybe poll progress."
  },
  {
    "objectID": "hpc0.html#help-and-man",
    "href": "hpc0.html#help-and-man",
    "title": "arctraining slides",
    "section": "--help and man",
    "text": "--help and man\n\n--help is a command option that prints help about using the command\nman is a command to bring up the manual\nFor help using man: press the h-key `.\nTo quit the help about man, or man itself: press &lt;q&gt;\nUse &lt;space_bar&gt; to page through\n\n\n\n--help is pronounced minus-minus-help."
  },
  {
    "objectID": "hpc0.html#help-and-man-exercise",
    "href": "hpc0.html#help-and-man-exercise",
    "title": "arctraining slides",
    "section": "--help and man exercise",
    "text": "--help and man exercise\n\nEnter:\n\nman man\n\nFor help using man: press the h-key &lt;h&gt;.\nTo quit the help about man or any man page: press &lt;q&gt;.\nTo page through a man page: press &lt;space_bar&gt;.\nEnter:\n\nls --help\n\nEnter:\n\nman ls\n\n\nMaybe conduct a poll to find out who is ready to move on.\nIs it time for a break?"
  },
  {
    "objectID": "hpc0.html#home-directory-hidden-files-and-folders",
    "href": "hpc0.html#home-directory-hidden-files-and-folders",
    "title": "arctraining slides",
    "section": "Home directory hidden files and folders",
    "text": "Home directory hidden files and folders\n\n.bash_profile\n\nFinalises your user login shell\n\n.bashrc\n\nFinalises your user subshell\n\n\n\n\nOther hidden files and folders get added as you use commands and applications.\n\nThese often contain configuration details.\n\nIt is important to know these exist so as not to accidentally delete them."
  },
  {
    "objectID": "hpc0.html#mkdir-12",
    "href": "hpc0.html#mkdir-12",
    "title": "arctraining slides",
    "section": "mkdir 1/2",
    "text": "mkdir 1/2\n\nA command to create a directory.\nThe following is for creating a directory named test:\n\nmkdir test\n\nAttempting to create a directory that already exists prints a warning.\n\n[user@host ~]$ mkdir test\nmkdir: cannot create directory ‘test’: File exists\n\n\nmkdir is pronounced muck-der."
  },
  {
    "objectID": "hpc0.html#mkdir-22",
    "href": "hpc0.html#mkdir-22",
    "title": "arctraining slides",
    "section": "mkdir 2/2",
    "text": "mkdir 2/2\n\nThe -p option allows for creating parent directories\nThe following creates the directory test2 and in this the directory test3\n\nmkdir -p test2/test3\n\nTo create a directory, you must have permission to write to the directory in which it is being created\nWithout write permissions a warning is printed, for example:\n\n[user@host ~]$ mkdir /test\nmkdir: cannot create directory ‘/test’: Permission denied"
  },
  {
    "objectID": "hpc0.html#cd-12",
    "href": "hpc0.html#cd-12",
    "title": "arctraining slides",
    "section": "cd 1/2",
    "text": "cd 1/2\n\nA command to change directory\n\n[user@host ~]$ cd test\n[user@host test]$ cd ~\n[user@host ~]$ cd test\n[user@host test]$ cd\n[user@host ~]$\n\nNotice that the prompt changes.\nWithout read permission you cannot change into a directory and a warning is printed:\n\n[user@host ~]$ cd /root\n-bash: cd: /root: Permission denied\n\n\ncd is pronounced see-dee."
  },
  {
    "objectID": "hpc0.html#cd-12-1",
    "href": "hpc0.html#cd-12-1",
    "title": "arctraining slides",
    "section": "cd 1/2",
    "text": "cd 1/2\n\nTo return to your home directory use:\n\ncd with no arguments or cd ~\n\n\n\n\nTo change directories more efficiently users might like to learn about pushd, popd and dirs."
  },
  {
    "objectID": "hpc0.html#ls-mkdir-and-cd-demo",
    "href": "hpc0.html#ls-mkdir-and-cd-demo",
    "title": "arctraining slides",
    "section": "ls, mkdir and cd demo",
    "text": "ls, mkdir and cd demo\n\n\nDemo making, listing and moving into directories."
  },
  {
    "objectID": "hpc0.html#ls-mkdir-and-cd-exercise",
    "href": "hpc0.html#ls-mkdir-and-cd-exercise",
    "title": "arctraining slides",
    "section": "ls, mkdir and cd exercise",
    "text": "ls, mkdir and cd exercise\n\nUse ls, mkdir and cd in your home directory.\nCheck if there is a directory with your user name in /nobackup/ and if not create it.\n\n\n\nMaybe poll who is ready to move on."
  },
  {
    "objectID": "hpc0.html#check-point",
    "href": "hpc0.html#check-point",
    "title": "arctraining slides",
    "section": "Check point",
    "text": "Check point\n\nYou can only list or change into directories you have permission to read.\nAny questions?\n\n\n\nIs it time for a break?"
  },
  {
    "objectID": "hpc0.html#time-savers-12",
    "href": "hpc0.html#time-savers-12",
    "title": "arctraining slides",
    "section": "Time savers 1/2",
    "text": "Time savers 1/2\n\n&lt;up&gt; and &lt;down&gt; arrow keys allow you to scroll previously entered commands\n\n&lt;return&gt; will enter the command\n\nPressing the control key &lt;Ctrl&gt; and another key will often do things:\n\n&lt;Ctrl&gt; + &lt;c&gt; will cancel\n\nThis can terminate a running command or cancel what is at the prompt\n\n&lt;Ctrl&gt; + &lt;a&gt; will move the cursor to the start of what is at the prompt\n&lt;Ctrl&gt; + &lt;e&gt; will move the cursor to the end of what is at the prompt\n&lt;Ctrl&gt; + &lt;r&gt; will do a reverse search through the history of commands entered at the prompt which can then be edited or entered\n\n\n\n\nThere are some states where &lt;Ctrl&gt; + &lt;c&gt; will not manage to escape you back to the prompt.\n&lt;ctrl&gt; + &lt;c&gt; (pronounced control-see) copies in Windows, but cancels in Linux!"
  },
  {
    "objectID": "hpc0.html#time-savers-22",
    "href": "hpc0.html#time-savers-22",
    "title": "arctraining slides",
    "section": "Time savers 2/2",
    "text": "Time savers 2/2\n\nThe prompt cursor does not have to be at the end of what is written at the prompt to submit what is there to the interpreter (run it)\nThe tab key &lt;Tab&gt; can be used to help autocomplete file paths\n\nPress &lt;Tab&gt; repeatedly two or three times to reveal optional paths\n\nThis can make your computer output an audible “bleep”\n\n\nCopy and paste using the mouse:\n\nHighlight by left-click-hold and drag mouse\nCopy with right click then select copy option\nPaste with right click and select paste option\nOr paste highlighted text using third mouse button"
  },
  {
    "objectID": "hpc0.html#time-savers-demo",
    "href": "hpc0.html#time-savers-demo",
    "title": "arctraining slides",
    "section": "Time savers demo",
    "text": "Time savers demo"
  },
  {
    "objectID": "hpc0.html#time-savers-exercise",
    "href": "hpc0.html#time-savers-exercise",
    "title": "arctraining slides",
    "section": "Time savers exercise",
    "text": "Time savers exercise\n\nUse &lt;up&gt; and &lt;down&gt; arrow keys to load previously entered commands into the prompt\nUse &lt;Ctrl&gt; + &lt;a&gt;, and &lt;Ctrl&gt; and &lt;e&gt; to move the cursor between the start and end of what is at the prompt\nUse &lt;Ctrl&gt; + &lt;c&gt; to cancel\nUse &lt;Ctrl&gt; + &lt;r&gt; to reverse search through the history of commands, and select one to edit or run\nUse copy and paste to paste a command at the prompt"
  },
  {
    "objectID": "hpc0.html#history-command",
    "href": "hpc0.html#history-command",
    "title": "arctraining slides",
    "section": "history command",
    "text": "history command\n\nhistory\n\nAnother way to repeat previous work is to use the history command to get a list of commands that have been executed, and then to use ![number] to repeat one of those commands.\n\n.bash_history\n\nA log of commands that you have entered is saved in this hidden file in your home directory."
  },
  {
    "objectID": "hpc0.html#more-commands",
    "href": "hpc0.html#more-commands",
    "title": "arctraining slides",
    "section": "More commands",
    "text": "More commands\n\n\n\nCommand\nDescription\n\n\n\n\nmv\nMove a file or directory (can be used to rename)\n\n\ncp\nCopy a file or directory - using the -r option\n\n\ntouch\nAccess or create a file or directory\n\n\nrmdir\nRemove (delete) a directory\n\n\nrm\nRemove (delete) a file or a directory - using the -r option\n\n\n\n\n\nPerhaps warn users to take more care with these!"
  },
  {
    "objectID": "hpc0.html#mv",
    "href": "hpc0.html#mv",
    "title": "arctraining slides",
    "section": "mv",
    "text": "mv\n\nA command to move a file or directory (can be used to rename)\nThe following would rename the file/directory test to test_renamed\n\nmv test test_renamed\n\n\nmv is pronounced em-vee."
  },
  {
    "objectID": "hpc0.html#cp",
    "href": "hpc0.html#cp",
    "title": "arctraining slides",
    "section": "cp",
    "text": "cp\n\nA command to copy a file or directory\nIf test is a file the following would make a copy named test_copy:\n\ncp test test_copy\n\nIf test is a directory a warning would be printed:\n\n[user@host ~]$ cp test test_copy\ncp: omitting directory 'test'\n\nThe -r option can copy a directory:\n\ncp -r test test_copy\n\n\ncp is pronounced see-pee."
  },
  {
    "objectID": "hpc0.html#touch",
    "href": "hpc0.html#touch",
    "title": "arctraining slides",
    "section": "touch, >, >>",
    "text": "touch, &gt;, &gt;&gt;\n\ntouch is a command that will create an empty file, or update the time a file was last accessed to the current time\nthe symbol &gt; can be used to direct the standard output to a file.\n\nThis will overwrite any existing file.\n\nThe following would direct the output of ls to a file named README\n\nls &gt; README\n\n&gt;&gt; can be used in place of &gt; to append to rather than overwrite the file\n\n\n\nMaybe point out that multiple processes writing to the same file simultaneously can make a mess!"
  },
  {
    "objectID": "hpc0.html#rmdir",
    "href": "hpc0.html#rmdir",
    "title": "arctraining slides",
    "section": "rmdir",
    "text": "rmdir\n\nA command to remove (delete) a directory.\n\nrmdir test\n\nIt will only remove the directory if it is empty.\nIf the directory is not empty, there will be a warning and the directory is not deleted.\n\n[user@host ~]$ rmdir test\nrmdir: failed to remove 'test': Directory not empty\n\nIf the user does not have permission to delete the directory, a warning is printed.\n\n[user@host ~]$ rmdir /root\nrmdir: failed to remove '/root': Permission denied\n\n\nrmdir is pronounced rem-der or are-em-der."
  },
  {
    "objectID": "hpc0.html#rm",
    "href": "hpc0.html#rm",
    "title": "arctraining slides",
    "section": "rm",
    "text": "rm\n\nA command to remove (delete) files and directories.\nThe following will remove a file called test:\n\nrm test\n\nTo delete a directory and all contents the -r option can be used.\nThe -i option allows for interactivity so the user can choose what to delete.\nThe -f option forces.\nTake care with rm, especially combined with -r and -f options.\n\n\n\nTake care especially using wildcards, as it is all too easy to delete everything!\n\nWe will look at wildcards a bit later…"
  },
  {
    "objectID": "hpc0.html#mv-cp-rmdir-rm-touch-exercise",
    "href": "hpc0.html#mv-cp-rmdir-rm-touch-exercise",
    "title": "arctraining slides",
    "section": "mv, cp, rmdir, rm, touch, >, >> exercise",
    "text": "mv, cp, rmdir, rm, touch, &gt;, &gt;&gt; exercise\n\nCreate some directories and files as follows:\n\nmkdir -p test0/test01\nmkdir test0/test02\ntouch test0/test01/test_file\n\nCopy test0/test01 into test0/test03\nRename test0/test02 into test0/test04\nDelete test0/test03\nDirect the output of ls into ls.out\nAppend the output of ls -al into ls.out"
  },
  {
    "objectID": "hpc0.html#check-point-2",
    "href": "hpc0.html#check-point-2",
    "title": "arctraining slides",
    "section": "Check point 2",
    "text": "Check point 2\n\nAny questions?\n\n\n\nIs it time for a break?"
  },
  {
    "objectID": "hpc0.html#yet-more-commands",
    "href": "hpc0.html#yet-more-commands",
    "title": "arctraining slides",
    "section": "Yet more commands",
    "text": "Yet more commands\n\n\n\n\n\n\n\nCommand\nDescription\n\n\n\n\ncat\nConcatenate and print\n\n\nless\nOpen into a paginated reader view\n\n\nsort\nSort lines\n\n\ncut\nCut lines based on a given character\n\n\nhead\nPrint the first lines of a file (default 10)\n\n\ntail\nPrint the last lines of a file (default 10)\n\n\nwc\nPrint newline, word, and byte counts\n\n\n\n\n\nLet’s look at these in turn…\nA word is a non-zero-length sequence of characters delimited by white"
  },
  {
    "objectID": "hpc0.html#git-clone-exercise",
    "href": "hpc0.html#git-clone-exercise",
    "title": "arctraining slides",
    "section": "git clone exercise",
    "text": "git clone exercise\n\nGet a copy of some data using the following git command:\n\ngit clone https://github.com/ARCTraining/shell-training/\n\ngit is a distributed version control system\nChange directory into the directory called shell-training.\nList the directory contents."
  },
  {
    "objectID": "hpc0.html#cat-sort-and-cut",
    "href": "hpc0.html#cat-sort-and-cut",
    "title": "arctraining slides",
    "section": "cat, sort and cut",
    "text": "cat, sort and cut\n\ncat concatenates (stream one thing after another) and prints to standard output\nsort sorts lines (by default alphabetically)\ncut cuts lines based on a given character\nCommands that create an output stream can have the output piped into another command that can process the stream using the symbol |\n\nFor example two files test and test2 can be concatenated, sorted alphabetically and piped into head as follows:\n\ncat test test2 | sort | head"
  },
  {
    "objectID": "hpc0.html#cat-sort-and-cut-exercise",
    "href": "hpc0.html#cat-sort-and-cut-exercise",
    "title": "arctraining slides",
    "section": "cat, sort and cut exercise",
    "text": "cat, sort and cut exercise\n\nProblemSolution\n\n\n\nCombine cat, cut, and sort to print out the Latin names from the file IOM-animals/birds.txt in alphabetical order.\nSave the output to a new file. Hint: cut -d ',' -f 2 will split lines around the comma and yield the second field.\n\n\n\ncat birds.txt | sort | cut -d ',' -f 2 &gt; sorted-birds.txt\nAnother option uses awk instead of cut:\ncat birds.txt | sort | awk '{FS=\",\"}{print $2}' &gt; sorted-birds.txt\n\nawk is a scripting language used for manipulating data and generating reports\n\nIt supports variables, numeric functions, string functions, and logical operators\nIt allows for setting field separators of multiple characters, whereas cut is restricted to a single character field separator.\n\nThe {FS=\",\"} part of the awk command sets the field separator to a comma, to set as a space followed by a comma use {FS=\" ,\"}"
  },
  {
    "objectID": "hpc0.html#head-and-tail",
    "href": "hpc0.html#head-and-tail",
    "title": "arctraining slides",
    "section": "head and tail",
    "text": "head and tail\n\nThe head command prints the first lines of a file\nThe tail command prints the last lines of a file\nThe default number of lines is 10\n\nThis can be changed with the -n option"
  },
  {
    "objectID": "hpc0.html#head-and-tail-exercise",
    "href": "hpc0.html#head-and-tail-exercise",
    "title": "arctraining slides",
    "section": "head and tail exercise",
    "text": "head and tail exercise\n\nProblemSolution\n\n\nList all the lines in the files in IOM-animals directory alphabetically and find the 50th item.\n\n\nUse head to get the first 50 lines and pipe it to tail to get the last one:\nsort *.txt | head -n 50 | tail -n 1\nAnother option is to use the sed command instead of head and tail:\nsort *.txt | sed -n 50p"
  },
  {
    "objectID": "hpc0.html#yet-even-more-commands",
    "href": "hpc0.html#yet-even-more-commands",
    "title": "arctraining slides",
    "section": "Yet even more commands",
    "text": "Yet even more commands\n\n\n\nCommand\nDescription\n\n\n\n\ngrep\nFilter lines\n\n\nsed\nStream editor"
  },
  {
    "objectID": "hpc0.html#sed-12",
    "href": "hpc0.html#sed-12",
    "title": "arctraining slides",
    "section": "sed 1/2",
    "text": "sed 1/2\n\nA program command tool for stream editing that reads an input stream and produces an output stream\nInternally it has a pattern space and a hold buffer\nData is read from the input stream until the next newline character and placed into the pattern space\nOperations can be performed on the data in the pattern space\nData can be exchanged between the pattern space and the hold buffer\nOnce all specified operations have been performed, the pattern space is output and a newline character is added at the end"
  },
  {
    "objectID": "hpc0.html#sed-22",
    "href": "hpc0.html#sed-22",
    "title": "arctraining slides",
    "section": "sed 2/2",
    "text": "sed 2/2\n\nA simple sed program:\n\nsed 's/foo/bar/'\n\nThis program replaces all instances of foo with bar on every line\nTake care using sed as it can modify files"
  },
  {
    "objectID": "hpc0.html#grep",
    "href": "hpc0.html#grep",
    "title": "arctraining slides",
    "section": "grep",
    "text": "grep\n\nA command to print all lines containing or not containing a string of characters\nThe following will stream out all input lines containing foo:\n\ngrep foo\n\nThe following will stream out all input lines not containing foo:\n\ngrep -v foo"
  },
  {
    "objectID": "hpc0.html#sed-and-grep-demo",
    "href": "hpc0.html#sed-and-grep-demo",
    "title": "arctraining slides",
    "section": "sed and grep demo",
    "text": "sed and grep demo\n\n\nOffer a demo?"
  },
  {
    "objectID": "hpc0.html#data-challenge-exercise",
    "href": "hpc0.html#data-challenge-exercise",
    "title": "arctraining slides",
    "section": "Data challenge exercise",
    "text": "Data challenge exercise\n\nProblemSolution\n\n\n\nshell-training/data/ contains 300 data files, each of which should contain 100 values. One or more of these files are missing some data though…\nUse a series of commands connected by pipes to identify which files have missing data.\nHints:\n\nwc -w will tell you the number of values in a file\nsort -n will sort numerically\n\n\n\n\nUsing grep:\nwc -w values* | sort -n | grep -v '100 values'\nUsing head:\nwc -w values* | sort -n | head\nUsing awk:\nwc -w values* | sort -n | awk '$1 != 100 {print $0}'"
  },
  {
    "objectID": "hpc0.html#permissions-14",
    "href": "hpc0.html#permissions-14",
    "title": "arctraining slides",
    "section": "Permissions 1/4",
    "text": "Permissions 1/4\n\nFile permissions can be identified using the ls command with the -l option\nBy default, the owner has read, write and execute permissions on a directory they create, and read and write (but not execute) permission on a file they create\nOn ARC4, group and all have no permissions by default\nOn ARC3, group and all have read permissions on files and also execute permissions on directories by default\n\n[user@host ~]$ mkdirs -p test0/test\n[user@host ~]$ touch test0/test/test-file\n[user@host ~]$ ls -la test0/test\ndrwx------ 2 &lt;owner&gt; &lt;group&gt; &lt;size&gt; &lt;date&gt; &lt;time&gt; .\ndrwx------ 3 &lt;owner&gt; &lt;group&gt; &lt;size&gt; &lt;date&gt; &lt;time&gt; ..\n-rw------- 1 &lt;owner&gt; &lt;group&gt; &lt;size&gt; &lt;date&gt; &lt;time&gt; test-file"
  },
  {
    "objectID": "hpc0.html#permissions-24",
    "href": "hpc0.html#permissions-24",
    "title": "arctraining slides",
    "section": "Permissions 2/4",
    "text": "Permissions 2/4\n\nA schematic to help explain what ls -l shows:\n\n-rw------- 1 &lt;owner&gt; &lt;group&gt; &lt;size&gt; &lt;date&gt; &lt;time&gt; test-file\n     |     |    |       |       |      |      |\n     |     |    |       |       |      |      +----&gt; time last modified\n     |     |    |       |       |      +-----------&gt; date last modified\n     |     |    |       |       +------------------&gt; size in bytes\n     |     |    |       +--------------------------&gt; group assignment\n     |     |    +----------------------------------&gt; owner username\n     |     +---------------------------------------&gt; number of hard link\n     +---------------------------------------------&gt; type and permissions\n\nA schematic to help explain the type and permissions part:\n\n-rw-------\n| |  |  |\n| |  |  +----&gt; all user permissions (3 characters)\n| |  +-------&gt; group user permissions (3 characters)\n| +----------&gt; owner permissions (3 characters)\n+------------&gt; type (1 character)"
  },
  {
    "objectID": "hpc0.html#permissions-34",
    "href": "hpc0.html#permissions-34",
    "title": "arctraining slides",
    "section": "Permissions 3/4",
    "text": "Permissions 3/4\nType and permissions examples\n\n\n\ndrwxr-x---\n\ntype: directory\npermissions\n\nowner: read, write, execute\ngroup: read, execute\nall: none\n\n\n\n\n\n-rw-------\n\ntype: file\npermissions\n\nowner: read, write\ngroup: none\nall: none"
  },
  {
    "objectID": "hpc0.html#permissions-44",
    "href": "hpc0.html#permissions-44",
    "title": "arctraining slides",
    "section": "Permissions 4/4",
    "text": "Permissions 4/4\n\nPermissions may be changed using the chmod command.\nSpecific permissions can be granted or removed or all permissions can be specified\nThe following would set permissions -rwx------ to test.file:\n\nchmod 700 test.file\n\nDon’t worry about remembering details of how to change permissions.\nTry to remember that there are:\n\n\n\n\n3 levels of permission:\n\nuser\ngroup\nall\n\n\n\n\n3 types of permission:\n\nread\nwrite\nexecute\n\n\n\n\n\n\nThe following would add user (owner) execute permissions.\n\nchmod u+x test0/test/test-file\n\noctal value = read (4) + write (2) + execute (1)\nA later exercise will require adding execute permissions for a file…"
  },
  {
    "objectID": "hpc0.html#groups",
    "href": "hpc0.html#groups",
    "title": "arctraining slides",
    "section": "Groups",
    "text": "Groups\n\nSystem users belong to groups (at least one)\nA user can change the group assignment for a file or directory to other groups they belong to using the command chgrp\nThe command groups can be used to print out what groups there are, and what group a user is part of\nThis can be useful if you want to share files between those in a group on the system"
  },
  {
    "objectID": "hpc0.html#check-point-3",
    "href": "hpc0.html#check-point-3",
    "title": "arctraining slides",
    "section": "Check point 3",
    "text": "Check point 3\n\nAny questions?\n\n\n\nTime for a break?"
  },
  {
    "objectID": "hpc0.html#variables",
    "href": "hpc0.html#variables",
    "title": "arctraining slides",
    "section": "Variables",
    "text": "Variables\n\nVariables are defined and accessed as follows:\n\nvar=1\necho $var\n\nThe variable var is set equal to the number 1.\necho is a command that will send what comes after it to the Standard Output (stdout).\nThe value of the variable is accessed using the $ symbol followed by the name of the variable.\nThe command printenv will print all the variables in use."
  },
  {
    "objectID": "hpc0.html#for-loop-12",
    "href": "hpc0.html#for-loop-12",
    "title": "arctraining slides",
    "section": "For loop 1/2",
    "text": "For loop 1/2\nExamples\n\nIterator syntax to print the numbers 1 to 5:\n\nfor ((i=1;i&lt;=5;i=i+1)) do echo $i; done\n\nSequence syntax to print the numbers 1 to 5:\n\nfor i in {1..5}; do echo $i; done\n\nSequence syntax to print even numbers from 2 to 10:\n\nfor i in {2..10..2}; do echo $i; done\n\nIterator syntax to print a geometric series from 2 to 256:\n\nfor ((i=2;i&lt;=265;i=i*2)) do echo $i; done"
  },
  {
    "objectID": "hpc0.html#for-loop-22",
    "href": "hpc0.html#for-loop-22",
    "title": "arctraining slides",
    "section": "For loop 2/2",
    "text": "For loop 2/2\n\nExample for loop to loop through directory contents:\n\nfor f in *; do echo $f; done\n\nWhere there is a ; there can be a new line:\n\nfor f in *\ndo echo $f\ndone"
  },
  {
    "objectID": "hpc0.html#for-loops-exercise-1",
    "href": "hpc0.html#for-loops-exercise-1",
    "title": "arctraining slides",
    "section": "For loops exercise 1",
    "text": "For loops exercise 1\n\nProblemSolution\n\n\n\nUse a for loop to create five directories called calculation_?, where ? is a number.\n\n\n\n\nFor loop with an iterator syntax\n\nfor ((i=1;i&lt;6;i++))\ndo\nmkdir calculation_$i\ndone\n\ni++ is shorthand for i=i+1\nFor loop with a sequence syntax\n\nfor i in {1..5}\ndo\nmkdir calculation_$i\ndone"
  },
  {
    "objectID": "hpc0.html#for-loops-exercise-2",
    "href": "hpc0.html#for-loops-exercise-2",
    "title": "arctraining slides",
    "section": "For loops exercise 2",
    "text": "For loops exercise 2\n\nProblemSolution\n\n\n\nUse a for loop to create five directories, each one the parent of the next.\n\n\n\nfor i in {1..5}; do\nmkdir calculation_$i\ncd calculation_$i\ndone"
  },
  {
    "objectID": "hpc0.html#wildcards",
    "href": "hpc0.html#wildcards",
    "title": "arctraining slides",
    "section": "Wildcards",
    "text": "Wildcards\n\nIn Linux:\n\n* can represent anything.\n? can represent any single character.\n[] can represent any single character detailed in the square brackets.\n\nThe following will list all files starting with a:\n\nls a*\n\nThe following will list all files starting with a and ending .txt that have one character between these:\n\nls a?.txt\n\nThe following will list all files starting with a and ending .txt that have any other string with a 0 or a 1 character between these:\n\nls a[12].txt\n\n\n* is pronounced star or asterisk.\n? is pronounced question-mark.\n[ is pronounced start-square-bracket\n] is pronounced end-square-bracket"
  },
  {
    "objectID": "hpc0.html#wildcards-exercise",
    "href": "hpc0.html#wildcards-exercise",
    "title": "arctraining slides",
    "section": "Wildcards exercise",
    "text": "Wildcards exercise\n\nProblemSolution\n\n\n\nPrint out the first line of each file in the wildcards directory.\n\n\n\nfor f in *.txt\n&gt; do\n&gt; head -n 1 $f\n&gt; done"
  },
  {
    "objectID": "hpc0.html#quiz",
    "href": "hpc0.html#quiz",
    "title": "arctraining slides",
    "section": "Quiz",
    "text": "Quiz\n\nQuestionAnswer\n\n\nIf the following is run from the wildcards directory. What will be printed?\nfor f in *.txt\n&gt; do\n&gt; echo $f\n&gt; cat $f &gt; new-file.txt\n&gt; done\nWhat will the contents of new-file.txt be and why?\n\n\n\nThe command will print the name of each .txt file:\n\nThe echo command prints a different file name each iteration\n\nThe content of new-file.txt will be the same as xyz.txt:\n\nThe contents of a different file are written to new-file.txt each iteration, overwriting whatever was written on the previous iteration\nUsing &gt;&gt; instead of &gt; would append instead of overwrite."
  },
  {
    "objectID": "hpc0.html#editing-files",
    "href": "hpc0.html#editing-files",
    "title": "arctraining slides",
    "section": "Editing files",
    "text": "Editing files\n\nThese are three programs available on the system that can be used for text editing:\n\nnano\nvim\nemacs\n\nIf you are unfamiliar with any of these, we recommend you try nano.\nCare is needed if transferring scripts and data between Windows and Linux due to differences in line endings.\n\ndos2unix and unix2dos may be helpful to get this right.\n\n\n\n\nData/File transfer is covered in HPC1."
  },
  {
    "objectID": "hpc0.html#shell-scripts",
    "href": "hpc0.html#shell-scripts",
    "title": "arctraining slides",
    "section": "Shell Scripts",
    "text": "Shell Scripts\n\nThese are simple text files:\n\nBy convention the filename ends .sh\n\nThe file should start with a shebang:\n\nA line which tells the Linux system what command to run:\n\n#!/bin/bash\nAfter the shebang, simply enter all the commands for the script.\nLines starting with # will be regarded as comments\n\nUse these to make your script easier to understand.\n\nTo run the script it must have executable permissions.\nA script saved as script.sh can be run using:\n\n./script.sh"
  },
  {
    "objectID": "hpc0.html#shell-scripts-demo",
    "href": "hpc0.html#shell-scripts-demo",
    "title": "arctraining slides",
    "section": "Shell Scripts demo",
    "text": "Shell Scripts demo"
  },
  {
    "objectID": "hpc0.html#shell-script-exercise",
    "href": "hpc0.html#shell-script-exercise",
    "title": "arctraining slides",
    "section": "Shell Script exercise",
    "text": "Shell Script exercise\n\nCreate and run a shell script to print out the first line of each file in a directory. Test using the wildcards directory.\nHints:\n\nUse the history command to see the commands you’ve entered\nPipe the history output into tail\nDirect the output into a file and then use nano to modify this into a script\nModify the file permissions so you can execute the file\nIf you named the script script.sh issue the following command to run it:\n\n./script.sh\n\n\n\nUseful scripts can be put somewhere sensible and this directory can be added to your PATH.\nIf there is more time, perhaps look at some other built-in commands.\n\nman bash-builtins\npushd, dirs, popd are perhaps good candidates…"
  },
  {
    "objectID": "hpc0.html#thank-you",
    "href": "hpc0.html#thank-you",
    "title": "arctraining slides",
    "section": "Thank you",
    "text": "Thank you\nIf you have any questions or would like to learn more about Research Computing, please do not hesitate to get in touch with us.\n\n\nWe are always here to assist you!\n\nContact via IT Service Desk: https://bit.ly/arc-help\nSee our Website: https://arc.leeds.ac.uk/\nHPC documentation: https://arcdocs.leeds.ac.uk\n\n\n\nResearch IT Website | Research IT Query | Courses Material"
  },
  {
    "objectID": "hpc1.html#meta-code",
    "href": "hpc1.html#meta-code",
    "title": "arctraining slides",
    "section": "HPC 1",
    "text": "HPC 1\nIntroduction to High Performance Computing"
  },
  {
    "objectID": "hpc1.html#research-computing-team-and-service",
    "href": "hpc1.html#research-computing-team-and-service",
    "title": "arctraining slides",
    "section": "Research Computing Team and Service",
    "text": "Research Computing Team and Service\n\n\nHere to support research(ers)\n\nProvide training\nSupport users of Grid and Cloud Computing platforms\nProvide consultancy\n\nTo develop project proposals\nTo help recruit people with specialist skills\nWorking directly on research projects\n\n\nFor details please see our Website\nContact us via the IT Service Desk\n\n\n\nIf you follow a link then a new tab will open in the Slide View Web browser.\n\nThis will want closing or the Slide View activating again as he main tab in the browser.\n\nMaybe point out some sections/features on the Research Computing Website.\nWe support use and develop resources."
  },
  {
    "objectID": "hpc1.html#purpose-of-hpc1",
    "href": "hpc1.html#purpose-of-hpc1",
    "title": "arctraining slides",
    "section": "Purpose of HPC1",
    "text": "Purpose of HPC1\n\nIntroducing Research Computing and the HPCs at Leeds\nHands on with Linux and ARC4\nRunning code\nBatch and Interactive jobs\nData management\nJoys of parallel jobs\nAdvanced job submissions"
  },
  {
    "objectID": "hpc1.html#useful-links",
    "href": "hpc1.html#useful-links",
    "title": "arctraining slides",
    "section": "Useful Links",
    "text": "Useful Links\n\nARC Website: https://arc.leeds.ac.uk/\nARC Documentation https://arcdocs.leeds.ac.uk\nGeneral queries: https://bit.ly/arc-help"
  },
  {
    "objectID": "hpc1.html#training",
    "href": "hpc1.html#training",
    "title": "arctraining slides",
    "section": "Training",
    "text": "Training"
  },
  {
    "objectID": "hpc1.html#archpc-training-portfolio",
    "href": "hpc1.html#archpc-training-portfolio",
    "title": "arctraining slides",
    "section": "ARC/HPC Training Portfolio",
    "text": "ARC/HPC Training Portfolio\nhttps://arc.leeds.ac.uk/training"
  },
  {
    "objectID": "hpc1.html#introductions-and-motivations",
    "href": "hpc1.html#introductions-and-motivations",
    "title": "arctraining slides",
    "section": "Introductions and Motivations",
    "text": "Introductions and Motivations\n\nWho are you and why are you here?\nWhat problems are you encountering with your computational work now? \nWhy / how do you think HPC will help?"
  },
  {
    "objectID": "hpc1.html#key-concepts",
    "href": "hpc1.html#key-concepts",
    "title": "arctraining slides",
    "section": "Key Concepts",
    "text": "Key Concepts\n\nHigh Performance Computing (HPC)\nHigh Throughput Computing (HTC)\n“Supercomputing”"
  },
  {
    "objectID": "hpc1.html#applications",
    "href": "hpc1.html#applications",
    "title": "arctraining slides",
    "section": "Applications",
    "text": "Applications"
  },
  {
    "objectID": "hpc1.html#terminology",
    "href": "hpc1.html#terminology",
    "title": "arctraining slides",
    "section": "Terminology",
    "text": "Terminology\n\nNode: the physical machine/server. In current systems, a node would typically include one or more processors, as well as memory and other hardware.\nProcessor: the central processing unit (CPU) inside the node, which contains one or more cores.\nCore: Refers to the basic computation unit of the CPU. This is the unit that carries out the actual computations."
  },
  {
    "objectID": "hpc1.html#leeds-facilities",
    "href": "hpc1.html#leeds-facilities",
    "title": "arctraining slides",
    "section": "Leeds facilities",
    "text": "Leeds facilities\n\nARC3 brought into service in 2017\nARC4 brought into service in 2019"
  },
  {
    "objectID": "hpc1.html#a-supercomputer-isnt",
    "href": "hpc1.html#a-supercomputer-isnt",
    "title": "arctraining slides",
    "section": "A Supercomputer isn’t…",
    "text": "A Supercomputer isn’t…"
  },
  {
    "objectID": "hpc1.html#single-computer-vs-grid-of-computers",
    "href": "hpc1.html#single-computer-vs-grid-of-computers",
    "title": "arctraining slides",
    "section": "Single computer vs grid of computers",
    "text": "Single computer vs grid of computers"
  },
  {
    "objectID": "hpc1.html#serial-and-parallel-programs",
    "href": "hpc1.html#serial-and-parallel-programs",
    "title": "arctraining slides",
    "section": "Serial and parallel programs",
    "text": "Serial and parallel programs\n\nSerial programs run on a single CPU core, solving one problem at a time.\nParallel programs run across multiple CPU cores, splitting the workload between them and solving the problem faster."
  },
  {
    "objectID": "hpc1.html#serial-program",
    "href": "hpc1.html#serial-program",
    "title": "arctraining slides",
    "section": "Serial Program",
    "text": "Serial Program"
  },
  {
    "objectID": "hpc1.html#parallel-program",
    "href": "hpc1.html#parallel-program",
    "title": "arctraining slides",
    "section": "Parallel Program",
    "text": "Parallel Program"
  },
  {
    "objectID": "hpc1.html#amdahls-law",
    "href": "hpc1.html#amdahls-law",
    "title": "arctraining slides",
    "section": "Amdahl’s Law",
    "text": "Amdahl’s Law\n\n\n\nDaniels220 at English Wikipedia, CC BY-SA 3.0 https://creativecommons.org/licenses/by-sa/3.0, via Wikimedia Commons"
  },
  {
    "objectID": "hpc1.html#basic-parallel-machine",
    "href": "hpc1.html#basic-parallel-machine",
    "title": "arctraining slides",
    "section": "Basic parallel machine",
    "text": "Basic parallel machine"
  },
  {
    "objectID": "hpc1.html#differences-from-desktop-computing",
    "href": "hpc1.html#differences-from-desktop-computing",
    "title": "arctraining slides",
    "section": "Differences from Desktop computing?",
    "text": "Differences from Desktop computing?\n\nWe don’t log on to compute nodes directly\n\nsubmit jobs via a batch scheduling system\n\nNot a GUI-based environment\nSystem is shared with many other users\nResources more tightly monitored and controlled\n\nMemory\nCPU usage (‘cores’)\nTime"
  },
  {
    "objectID": "hpc1.html#benefits-of-using-hpc",
    "href": "hpc1.html#benefits-of-using-hpc",
    "title": "arctraining slides",
    "section": "Benefits of using HPC",
    "text": "Benefits of using HPC\n\nSpeed\nVolume\nCost\nEfficiency\nConvenience"
  },
  {
    "objectID": "hpc1.html#parallel-paradigms",
    "href": "hpc1.html#parallel-paradigms",
    "title": "arctraining slides",
    "section": "Parallel Paradigms",
    "text": "Parallel Paradigms\nFrom a systems perspective:\n\nShared memory parallelism\nDistributed memory parallelism\n\nUnless you are writing your own codes, the software developer takes care of this."
  },
  {
    "objectID": "hpc1.html#basic-hpc-system-layout",
    "href": "hpc1.html#basic-hpc-system-layout",
    "title": "arctraining slides",
    "section": "Basic HPC system layout",
    "text": "Basic HPC system layout"
  },
  {
    "objectID": "hpc1.html#exercise-1.1",
    "href": "hpc1.html#exercise-1.1",
    "title": "arctraining slides",
    "section": "Exercise 1.1",
    "text": "Exercise 1.1\nWhat do the following Linux commands do? How might they be used on the HPC service?\n\nls\npwd\nmkdir\ncp\nwget\nrm"
  },
  {
    "objectID": "hpc1.html#exercise-1.2",
    "href": "hpc1.html#exercise-1.2",
    "title": "arctraining slides",
    "section": "Exercise 1.2",
    "text": "Exercise 1.2\nOn the HPC service, you have a ‘HOME’ directory of 10GB and can create a directory on the /nobackup drive.\nUsing the man pages (or Google…) investigate how you could use the following commands to manage your storage:\n\nquota\ndf\ndu"
  },
  {
    "objectID": "hpc1.html#exercise-1.3",
    "href": "hpc1.html#exercise-1.3",
    "title": "arctraining slides",
    "section": "Exercise 1.3",
    "text": "Exercise 1.3\nLinux systems include a number of file compression routines.\nFind out which ones are available on the cluster and use them to create a compressed archive of a directory and its contents."
  },
  {
    "objectID": "hpc1.html#exercise-1.4",
    "href": "hpc1.html#exercise-1.4",
    "title": "arctraining slides",
    "section": "Exercise 1.4",
    "text": "Exercise 1.4\nHow could you read a PDF file or an HTML document on the cluster?"
  },
  {
    "objectID": "hpc1.html#hpc-at-leeds",
    "href": "hpc1.html#hpc-at-leeds",
    "title": "arctraining slides",
    "section": "HPC at Leeds",
    "text": "HPC at Leeds\nARC4 is the latest incarnation of central HPC at Leeds.\nHPC currently comprised of two facilities called ARC3 and ARC4\nAll Faculties are shareholders and so it is important that all who can benefit from the use of this facility do so."
  },
  {
    "objectID": "hpc1.html#arc3",
    "href": "hpc1.html#arc3",
    "title": "arctraining slides",
    "section": "ARC3",
    "text": "ARC3\n2 x login nodes: 24 cores and 128GB RAM\n252 x standard compute nodes: 24 cores and 128GB RAM (=6048 cores); 100GB SSD\n4 x High Memory (24 cores and 768GB nodes)\n6 x P100 GPU nodes (24 core, 128GB and 4 x NVidia P100)\n2 x K80 GPU nodes (24 core, 128GB and 2 x NVidia K80)\n2 x Intel Xeon Phi (Knights Landing) vector processor nodes\n836TB of high speed storage: /nobackup"
  },
  {
    "objectID": "hpc1.html#arc4",
    "href": "hpc1.html#arc4",
    "title": "arctraining slides",
    "section": "ARC4",
    "text": "ARC4\n2 x login nodes: 40 cores and 192GB RAM\n149 x standard compute nodes: 40 cores and 192GB RAM (=5960 cores); 100GB SSD\n4 x High Memory (40 cores and 768GB nodes)\n3 x V100 GPU nodes (40 core, 192GB and 4 x NVidia V100)\n1.2PB of high speed storage: /nobackup"
  },
  {
    "objectID": "hpc1.html#exercise-2",
    "href": "hpc1.html#exercise-2",
    "title": "arctraining slides",
    "section": "Exercise 2",
    "text": "Exercise 2\nWe’re going to download some files to have a play with:\ngit clone https://github.com/ARCTraining/hpc1-files.git"
  },
  {
    "objectID": "hpc1.html#sge",
    "href": "hpc1.html#sge",
    "title": "arctraining slides",
    "section": "SGE",
    "text": "SGE\nSGE is a sophisticated scheduler:\n\nCan define usage policies.\nControl maximum limits.\nFair distribution of resources.\nProduces detailed usage accounting information."
  },
  {
    "objectID": "hpc1.html#queue-tools",
    "href": "hpc1.html#queue-tools",
    "title": "arctraining slides",
    "section": "Queue tools",
    "text": "Queue tools\n\nqsub: submit a batch job\nqrsh: run an interactive job\nqdel: delete a job\nqstat: Details on queued or running jobs\nqacct: Details on previous completed jobs\nqsched: A hint as to when your job might run"
  },
  {
    "objectID": "hpc1.html#submit-some-serial-r-jobs",
    "href": "hpc1.html#submit-some-serial-r-jobs",
    "title": "arctraining slides",
    "section": "Submit some serial R jobs",
    "text": "Submit some serial R jobs\nWe’re going to submit a job from the 1_R directory"
  },
  {
    "objectID": "hpc1.html#scheduling-notes",
    "href": "hpc1.html#scheduling-notes",
    "title": "arctraining slides",
    "section": "Scheduling notes",
    "text": "Scheduling notes\nOur clusters adopt a “fair share” policy\n\nJobs preferentially run based on current and previous usage from Faculty. Same applies when comparing users in same Faculty.\nThe lower the usage, the higher the priority (and vice versa).\n“Backfilling” is used to fit smaller jobs in between the top priority jobs. All jobs have specified run time, and so the scheduler will run lower priority jobs if they will start and finish before the highest priority jobs are scheduled to start. Thus indicating a realistic runtime for a job, will make short jobs eligible to be backfilled, potentially shortening their wait-time."
  },
  {
    "objectID": "hpc1.html#submit-a-serial-python-job",
    "href": "hpc1.html#submit-a-serial-python-job",
    "title": "arctraining slides",
    "section": "Submit a serial Python job",
    "text": "Submit a serial Python job\nCan you now do the same for a Python job in the 2_Python directory?\nTo run this Python code you do not need any modules loaded and can run it with:\npython example1.py"
  },
  {
    "objectID": "hpc1.html#normal-end-of-part-1",
    "href": "hpc1.html#normal-end-of-part-1",
    "title": "arctraining slides",
    "section": "Normal end of Part 1",
    "text": "Normal end of Part 1\nQuestions, recap"
  },
  {
    "objectID": "hpc1.html#drives-and-directories",
    "href": "hpc1.html#drives-and-directories",
    "title": "arctraining slides",
    "section": "Drives and Directories",
    "text": "Drives and Directories\nHPC users have access to two storage areas:\n\nA HOME directory\nSpace on /nobackup"
  },
  {
    "objectID": "hpc1.html#home-directory",
    "href": "hpc1.html#home-directory",
    "title": "arctraining slides",
    "section": "Home Directory",
    "text": "Home Directory\nThis is:\n\nPrivate to you\nBacked up\nLimited to 10GB storage (ARC)\nShared between machines"
  },
  {
    "objectID": "hpc1.html#nobackup",
    "href": "hpc1.html#nobackup",
    "title": "arctraining slides",
    "section": "/nobackup",
    "text": "/nobackup\n\nEach HPC cluster has its own high speed storage service called /nobackup\nYou need to make your own directory (using mkdir)\nNothing is backed up\nFiles will expire after 90 days not being used\nNeed to set permissions to make files private on ARC3 but not on ARC4."
  },
  {
    "objectID": "hpc1.html#local-storage",
    "href": "hpc1.html#local-storage",
    "title": "arctraining slides",
    "section": "Local storage",
    "text": "Local storage\nEach compute node has a small SSD.\n\n1Gbyte allocated per job by default via $TMPDIR\nTypically much faster than other storage available\nCan be increased if required:\n#$ -l disk=10G\nLimits vary depending on node type, but at least 100G\n\nMore on local storage"
  },
  {
    "objectID": "hpc1.html#transferring-files-and-data",
    "href": "hpc1.html#transferring-files-and-data",
    "title": "arctraining slides",
    "section": "Transferring files and data",
    "text": "Transferring files and data\n\nscp or rsync command line utility\nwget (to download from a remote server)\ngit (version control)\nsmbclient to copy from local M:/ and N:/ drives on campus\nGoogle Drive and OneDrive (via rclone)\ngraphical programs like Cyberduck or Filezilla (or indeed MobaXterm)"
  },
  {
    "objectID": "hpc1.html#module-system",
    "href": "hpc1.html#module-system",
    "title": "arctraining slides",
    "section": "Module system",
    "text": "Module system\nmodule\n\navail - what software could I add\nlist - show what is active\nadd|load - enable software\nrm|unload - disable software\nhelp - show details of software\nswap|switch - swap modules"
  },
  {
    "objectID": "hpc1.html#shared-vs-distributed-memory-jobs",
    "href": "hpc1.html#shared-vs-distributed-memory-jobs",
    "title": "arctraining slides",
    "section": "Shared vs Distributed memory jobs",
    "text": "Shared vs Distributed memory jobs"
  },
  {
    "objectID": "hpc1.html#submit-some-parallel-jobs",
    "href": "hpc1.html#submit-some-parallel-jobs",
    "title": "arctraining slides",
    "section": "Submit some parallel jobs",
    "text": "Submit some parallel jobs\nLet’s look at and compare a few submissions:\n\nserial\nthreaded\ndistributed"
  },
  {
    "objectID": "hpc1.html#gpus",
    "href": "hpc1.html#gpus",
    "title": "arctraining slides",
    "section": "GPUs",
    "text": "GPUs\nThree different types of GPU available\nARC3:\n\n2xK80 (1 node)\n4xP100 (6 nodes)\n\nARC4:\n\n4xV100 (3 nodes)\n\nSome extras in private queues"
  },
  {
    "objectID": "hpc1.html#submitting-a-gpu-job",
    "href": "hpc1.html#submitting-a-gpu-job",
    "title": "arctraining slides",
    "section": "Submitting a GPU job",
    "text": "Submitting a GPU job\nARC4:\n#$ -l coproc_v100=1\nARC3:\n#$ -l coproc_p100=1\nor\n#$ -l coproc_k80=1\nShould not ask for memory or CPU cores\nMore on GPGPU"
  },
  {
    "objectID": "hpc1.html#large-memory-nodes",
    "href": "hpc1.html#large-memory-nodes",
    "title": "arctraining slides",
    "section": "Large memory nodes",
    "text": "Large memory nodes\nARC4:\n#$ -l node_type=40core-768G\nARC3:\n#$ -l node_type=24core-768G\nAlso allows jobs to run for up to 96hrs"
  },
  {
    "objectID": "hpc1.html#interactive-jobs",
    "href": "hpc1.html#interactive-jobs",
    "title": "arctraining slides",
    "section": "Interactive jobs",
    "text": "Interactive jobs\nGeneral advice, don’t use them unless you have to.\nqrsh -l h_rt=0:15:0 -pty y bash -i\nMore in interactive jobs"
  },
  {
    "objectID": "hpc1.html#task-arrays",
    "href": "hpc1.html#task-arrays",
    "title": "arctraining slides",
    "section": "Task arrays",
    "text": "Task arrays\nWhen you want to run lots of similar jobs\n# Run 100 jobs from 1-100\n#$ -t 1-100\n# Don't run more than two at a time\n#$ -tc 2\n\nif[ $SGE_TASK_ID == $SGE_TASK_FIRST ]; then\n  echo I am the first job\nfi\n\necho I am job $SGE_TASK_ID\n\nif [ $SGE_TASK_ID == $SGE_TASK_LAST ]; then\n  echo I am the last job\nfi\nMore on task arrays"
  },
  {
    "objectID": "hpc1.html#restartable-jobs",
    "href": "hpc1.html#restartable-jobs",
    "title": "arctraining slides",
    "section": "Restartable jobs",
    "text": "Restartable jobs\nFor when 48hrs isn’t enough\nAt its simplest, just finish with a return code of 99 from the last line of your code, and the job will be rescheduled:\nexit 99\nMore on restartable jobs"
  },
  {
    "objectID": "hpc1.html#questions-and-time-for-recap",
    "href": "hpc1.html#questions-and-time-for-recap",
    "title": "arctraining slides",
    "section": "Questions and time for recap",
    "text": "Questions and time for recap\n\nSomething we’ve not covered that you’d like a look at\nAnything we have covered but you’d like to go over more\nA further look at arcdocs"
  },
  {
    "objectID": "hpc1.html#thank-you",
    "href": "hpc1.html#thank-you",
    "title": "arctraining slides",
    "section": "Thank you",
    "text": "Thank you\nIf you have any questions or would like to learn more about Research Computing, please do not hesitate to get in touch with us.\n\n\nWe are always here to assist you!\n\nContact via IT Service Desk: https://bit.ly/arc-help\nSee our Website: https://arc.leeds.ac.uk/\nHPC documentation: https://arcdocs.leeds.ac.uk\n\n\n\nResearch IT Website | Research IT Query | Courses Material"
  },
  {
    "objectID": "template.html#meta-code",
    "href": "template.html#meta-code",
    "title": "arctraining slides",
    "section": "Course Code",
    "text": "Course Code\nCourse Name"
  },
  {
    "objectID": "template.html#research-computing-team-and-service",
    "href": "template.html#research-computing-team-and-service",
    "title": "arctraining slides",
    "section": "Research Computing Team and Service",
    "text": "Research Computing Team and Service\n\n\nHere to support research(ers)\n\nProvide training\nSupport users of Grid and Cloud Computing platforms\nProvide consultancy\n\nTo develop project proposals\nTo help recruit people with specialist skills\nWorking directly on research projects\n\n\nFor details please see our Website\nContact us via the IT Service Desk\n\n\n\nIf you follow a link then a new tab will open in the Slide View Web browser.\n\nThis will want closing or the Slide View activating again as he main tab in the browser.\n\nMaybe point out some sections/features on the Research Computing Website.\nWe support use and develop resources."
  },
  {
    "objectID": "template.html#slide-a",
    "href": "template.html#slide-a",
    "title": "arctraining slides",
    "section": "Slide A",
    "text": "Slide A\nTemporary content"
  },
  {
    "objectID": "template.html#slide-b",
    "href": "template.html#slide-b",
    "title": "arctraining slides",
    "section": "Slide B",
    "text": "Slide B\nTemporary content"
  },
  {
    "objectID": "template.html#slide-c",
    "href": "template.html#slide-c",
    "title": "arctraining slides",
    "section": "Slide C",
    "text": "Slide C\nTemporary content"
  },
  {
    "objectID": "template.html#thank-you",
    "href": "template.html#thank-you",
    "title": "arctraining slides",
    "section": "Thank you",
    "text": "Thank you\nIf you have any questions or would like to learn more about Research Computing, please do not hesitate to get in touch with us.\n\n\nWe are always here to assist you!\n\nContact via IT Service Desk: https://bit.ly/arc-help\nSee our Website: https://arc.leeds.ac.uk/\nHPC documentation: https://arcdocs.leeds.ac.uk\n\n\n\nResearch IT Website | Research IT Query | Courses Material"
  },
  {
    "objectID": "swd3.html#meta-code",
    "href": "swd3.html#meta-code",
    "title": "arctraining slides",
    "section": "SWD3",
    "text": "SWD3\nSoftware development practices for Research"
  },
  {
    "objectID": "swd3.html#research-computing-team-and-service",
    "href": "swd3.html#research-computing-team-and-service",
    "title": "arctraining slides",
    "section": "Research Computing Team and Service",
    "text": "Research Computing Team and Service\n\n\nHere to support research(ers)\n\nProvide training\nSupport users of Grid and Cloud Computing platforms\nProvide consultancy\n\nTo develop project proposals\nTo help recruit people with specialist skills\nWorking directly on research projects\n\n\nFor details please see our Website\nContact us via the IT Service Desk\n\n\n\nIf you follow a link then a new tab will open in the Slide View Web browser.\n\nThis will want closing or the Slide View activating again as he main tab in the browser.\n\nMaybe point out some sections/features on the Research Computing Website.\nWe support use and develop resources."
  },
  {
    "objectID": "swd3.html#useful-links",
    "href": "swd3.html#useful-links",
    "title": "arctraining slides",
    "section": "Useful Links",
    "text": "Useful Links\n\nGitHub Project Demo\nAlan Turing Institute - Research Software Engineering Course Material"
  },
  {
    "objectID": "swd3.html#software-development-life-cycle-sdlc",
    "href": "swd3.html#software-development-life-cycle-sdlc",
    "title": "arctraining slides",
    "section": "Software Development Life Cycle (SDLC)",
    "text": "Software Development Life Cycle (SDLC)"
  },
  {
    "objectID": "swd3.html#sdlc",
    "href": "swd3.html#sdlc",
    "title": "arctraining slides",
    "section": "SDLC",
    "text": "SDLC\n\nIdeationRequirementsDesignDevelopmentTestDeploymentMaintenance\n\n\n\n\n\nWhat are we going to do?\n\n\nBrainstorming\nResearch\n\n\n\n\n\n\n\n\n\n\nHow are we going to do it?\n\nSome topics to help define requirements include:\n\nfinal goal\nproject scope (how to reach the final goal)\nwhat is feasible (and how)\nwhat is priority\nwhat resources are available\ndeadlines\npotential risks\n\n\nWarning: Each person involved in the project may have a different need.\n\n\n\n\n\n\n\n\n\n\nWhat is the software architecture?\n\nWhen designing software, the object-oriented approach is a common programming paradigm.\nObject-oriented components:\n\nClasses: A user-defined type\nObject instances: A particular object instantiated from a class.\nMethods: A function which is “built in” to a class\nConstructor: A special method called when instantiating a new object\n\nSome principles: abstraction, encapsulation, decomposition, generalisation\n\n\nSee more: \n\n\n\n\n\n\n\nIs this where the fun begins?\n\n\nTake your time\n\n\n\n\n\nDevelopment is usually the most time consuming step in a Software Development Life Cycle.\n\n\n\n\n\nIs this software good?\n\nIn this step, errors and failures are identified by exposing the code to an environment similar to the end-user experience.\nThere are several types of testing, some examples include:\n\nUnit testing: are all components working?\nIntegration testing: are all components working when fitted together?\nPerformance testing: how does the software perform against different workloads? It is fast? Stable?\nFunctional testing: is the software aligned with Software Requirement Specification?\n\n\n\n\n\n\n\n\n\n\nCan other people use my code?\n\nYou can use platforms like GitHub to release your software.\n\nThe functionality of the software is linked to several specifications related to the operating system and versions of packages and other software related to the project.\nListing these specifications will help others to replicate the environment in which the software was developed.\n\n\n\n\n\n\n\n\n\n\nIs it over?\n\nWe can classify maintenance into a few categories:\n\nCorrective: fix reported errors/failures.\nPreventive: regular checks and fixes.\nPerfective: optimize implemented features, adding new features.\nAdaptive: keep the software updated according to changes external to the project (new programming language version, new regulation, etc.)."
  },
  {
    "objectID": "swd3.html#basic-structure-suggestion",
    "href": "swd3.html#basic-structure-suggestion",
    "title": "arctraining slides",
    "section": "Basic Structure Suggestion",
    "text": "Basic Structure Suggestion\n# The most basic structure for a code project should look like:\nmy-model\n├── README.md\n├── requirements.txt\n├── src                &lt;- Source code for this project\n└── tests              &lt;- Test code for this project\n\nReadmeRequirements\n\n\n\nIs a guide that gives users a detailed description of a project you have worked on\nIt is the first file a person will see when they encounter your project, so it should be fairly brief but detailed.\nSee how to write a good README file in this freecodecamp post.\n\n\n\n\nText information about all the necessary additional libraries, modules, and packages.\nThis can be replaced by files like: environment.yml, pyproject.toml, setup.py."
  },
  {
    "objectID": "swd3.html#advanced-project-structure",
    "href": "swd3.html#advanced-project-structure",
    "title": "arctraining slides",
    "section": "Advanced Project Structure",
    "text": "Advanced Project Structure\nTemplate based on mkrapp/cookiecutter-reproducible-science github\n.\n├── AUTHORS.md\n├── LICENSE\n├── README.md\n├── bin                &lt;- Your compiled model code can be stored here (not tracked by git)\n├── config             &lt;- Configuration files, e.g., for doxygen or for your model if needed\n├── data\n│   ├── external       &lt;- Data from third party sources.\n│   ├── interim        &lt;- Intermediate data that has been transformed.\n│   ├── processed      &lt;- The final, canonical data sets for modeling.\n│   └── raw            &lt;- The original, immutable data dump.\n├── docs               &lt;- Documentation, e.g., doxygen or scientific papers (not tracked by git)\n├── notebooks          &lt;- Ipython or R notebooks\n├── reports            &lt;- For a manuscript source, e.g., LaTeX, Markdown, etc., or any project reports\n│   └── figures        &lt;- Figures for the manuscript or reports\n├── src                &lt;- Source code for this project\n│   ├── data           &lt;- scripts and programs to process data\n│   ├── external       &lt;- Any external source code, e.g., pull other git projects, or external libraries\n│   ├── models         &lt;- Source code for your own model\n│   ├── tools          &lt;- Any helper scripts go here\n│   └── visualization  &lt;- Scripts for visualisation of your results, e.g., matplotlib, ggplot2 related.\n└── tests              &lt;- Test code for this project"
  },
  {
    "objectID": "swd3.html#virtual-environments",
    "href": "swd3.html#virtual-environments",
    "title": "arctraining slides",
    "section": "Virtual Environments",
    "text": "Virtual Environments\nIf application A needs version 1.0 of a particular module but application B needs version 2.0, then the requirements are in conflict and installing either version 1.0 or 2.0 will leave one application unable to run.\nThe solution for this problem is to create a virtual environment, a self-contained directory tree that contains installation for particular versions of software/packages.\nConda\n\nConda is an open source package management system and environment management system that runs on Windows, macOS, and Linux.\nIt offers dependency and environment management for any language—Python, R, Ruby, Lua, Scala, Java, JavaScript, C/ C++, Fortran, and more.\nEasy user install via Anaconda."
  },
  {
    "objectID": "swd3.html#code-formatting",
    "href": "swd3.html#code-formatting",
    "title": "arctraining slides",
    "section": "Code formatting",
    "text": "Code formatting\n# myscript.py:\nx = {  'a':37,'b':42,\n'c':927}\ny = 'hello '+       'world'\nclass foo  (     object  ):\n   def f    (self   ):\n       return       y **2\n   def g(self, x :int,\n       y : int=42\n       ) -&gt; int:\n       return x--y\ndef f  (   a ) :\n   return      37+-a[42-a :  y*3]"
  },
  {
    "objectID": "swd3.html#coding-conventions",
    "href": "swd3.html#coding-conventions",
    "title": "arctraining slides",
    "section": "Coding conventions",
    "text": "Coding conventions\nIf your language or project has a standard policy, use that. For example:\n\nPython: PEP8\nR: Google’s guide for R, tidyverse style guide\nC++: Google’s style guide\nJulia: Official style guide"
  },
  {
    "objectID": "swd3.html#linters",
    "href": "swd3.html#linters",
    "title": "arctraining slides",
    "section": "Linters",
    "text": "Linters\nLinters are automated tools which enforce coding conventions and check for common mistakes. For example:\n\nPython:\n\nflake8 (flags any syntax/style errors)\nblack (enforces the style)\nisort (“Sorts” imports alphabetically in groups)"
  },
  {
    "objectID": "swd3.html#example-flake8-linter",
    "href": "swd3.html#example-flake8-linter",
    "title": "arctraining slides",
    "section": "Example: Flake8 Linter",
    "text": "Example: Flake8 Linter\n$ conda install flake8\n$ flake8 myscript.py\nmyscript.py:2:6: E201 whitespace after '{'\nmyscript.py:2:11: E231 missing whitespace after ':'\nmyscript.py:2:14: E231 missing whitespace after ','\nmyscript.py:2:18: E231 missing whitespace after ':'\nmyscript.py:3:1: E128 continuation line under-indented for visual indent\nmyscript.py:3:4: E231 missing whitespace after ':'\nmyscript.py:4:13: E225 missing whitespace around operator\nmyscript.py:4:14: E222 multiple spaces after operator\nmyscript.py:5:1: E302 expected 2 blank lines, found 0\nmyscript.py:5:13: E201 whitespace after '('\nmyscript.py:5:25: E202 whitespace before ')'\nmyscript.py:6:4: E111 indentation is not a multiple of 4\nmyscript.py:6:9: E211 whitespace before '('\nmyscript.py:6:20: E202 whitespace before ')'\nmyscript.py:7:8: E111 indentation is not a multiple of 4\nmyscript.py:7:14: E271 multiple spaces after keyword\nmyscript.py:7:25: E225 missing whitespace around operator\nmyscript.py:8:4: E301 expected 1 blank line, found 0\nmyscript.py:8:4: E111 indentation is not a multiple of 4\nmyscript.py:8:17: E203 whitespace before ':'\nmyscript.py:8:18: E231 missing whitespace after ':'\nmyscript.py:9:8: E128 continuation line under-indented for visual indent\nmyscript.py:9:9: E203 whitespace before ':'\nmyscript.py:9:15: E252 missing whitespace around parameter equals\nmyscript.py:9:16: E252 missing whitespace around parameter equals\nmyscript.py:10:8: E124 closing bracket does not match visual indentation\nmyscript.py:10:8: E125 continuation line with same indent as next logical line\nmyscript.py:11:8: E111 indentation is not a multiple of 4\nmyscript.py:12:1: E302 expected 2 blank lines, found 0\nmyscript.py:12:6: E211 whitespace before '('\nmyscript.py:12:9: E201 whitespace after '('\nmyscript.py:12:13: E202 whitespace before ')'\nmyscript.py:12:15: E203 whitespace before ':'\nmyscript.py:13:4: E111 indentation is not a multiple of 4\nmyscript.py:13:10: E271 multiple spaces after keyword\nmyscript.py:13:26: E203 whitespace before ':'\nmyscript.py:13:34: W291 trailing whitespace"
  },
  {
    "objectID": "swd3.html#example-black-code-formatter",
    "href": "swd3.html#example-black-code-formatter",
    "title": "arctraining slides",
    "section": "Example: Black Code Formatter",
    "text": "Example: Black Code Formatter\n\nInstall and run Black\n\n$ conda install black\n$ black myscript.py\n\nCheck the file!\n\n# myscript.py:\nx = {\"a\": 37, \"b\": 42, \"c\": 927}\ny = \"hello \" + \"world\"\n\n\nclass foo(object):\n    def f(self):\n        return y**2\n\n    def g(self, x: int, y: int = 42) -&gt; int:\n        return x - -y\n\n\ndef f(a):\n    return 37 + -a[42 - a : y * 3]"
  },
  {
    "objectID": "swd3.html#ide",
    "href": "swd3.html#ide",
    "title": "arctraining slides",
    "section": "IDE",
    "text": "IDE\nUsing an Integrated development environment (IDE) will certainly save you time, but the advantages of using an IDE go beyond that. Below are some IDE advantages\n\nSyntax highlighting\nText autocompletion\nRefactoring options\nEasily Importing libraries\nBuild, compile, or run\n\nVisual Studio Code\nTo install VS Code follow the instructions here."
  },
  {
    "objectID": "swd3.html#vsc-example-automatically-using-black",
    "href": "swd3.html#vsc-example-automatically-using-black",
    "title": "arctraining slides",
    "section": "VSC Example: automatically using black",
    "text": "VSC Example: automatically using black\nConfigure VSC to use Black: Code (or File) &gt; Preferences &gt; Settings\n\nSearch for python formatting provider and choose black\nSearch for format on save and check the box to enable\n\nSelect interpreter: View &gt; Command Palette.. (or Ctrl+Shift+P)\n\nSearch for Python: Select Interpreter\nChoose the correct environment\n\nNow the Black package is going to fix your codes layout every time you save a code file."
  },
  {
    "objectID": "swd3.html#version-control",
    "href": "swd3.html#version-control",
    "title": "arctraining slides",
    "section": "Version Control",
    "text": "Version Control\n\nPiled Higher and Deeper by Jorge Cham"
  },
  {
    "objectID": "swd3.html#test-driven-development",
    "href": "swd3.html#test-driven-development",
    "title": "arctraining slides",
    "section": "Test-driven development",
    "text": "Test-driven development\nExample, suppose we need to find the result of a number divided by another number:\n\nNaive solutionTDD solution\n\n\n\nWrite a function a_div_b.\nCall it interactively on two or three different inputs.\nIf it produces the wrong answer, fix the function and re-run that test.\n\nThis clearly works — after all, thousands of scientists are doing it right now — but there’s a better way\n\n\n\nWrite a short function for each test.\nWrite a a_div_b function that should pass those tests.\nIf a_div_b produces any wrong answers, fix it and re-run the test functions.\n\nWriting the tests before writing the function they exercise is called test-driven development (TDD). Its advocates believe it produces better code faster because:\n\nIf people write tests after writing the thing to be tested, they are subject to confirmation bias, i.e., they subconsciously write tests to show that their code is correct, rather than to find errors.\nWriting tests helps programmers figure out what the function is actually supposed to do."
  },
  {
    "objectID": "swd3.html#possible-tests-a_div_b-example",
    "href": "swd3.html#possible-tests-a_div_b-example",
    "title": "arctraining slides",
    "section": "Possible tests: a_div_b example",
    "text": "Possible tests: a_div_b example\nLet’s think in all possible scenarios for this problem and how we could test them.\n\nBigger by smallerSmaller by biggerNegative numbers\n\n\n\nUsing 4 and 2, the answer should be 2.\n\nassert a_div_b(4, 2) == 2\n\nOr… the answer should be larger than 1.\n\nassert a_div_b(8, 7) &gt; 1\n\n\n\nUsing 2 and 4, the answer should be 0.5.\n\nassert a_div_b(2, 4) == 0.5\n\nOr… the answer should be smaller than 1.\n\nassert a_div_b(7, 8) &lt; 1\n\n\n\nUsing -4 and -2, the answer should be 2.\n\nassert a_div_b(-4, -2) == 2\n\nOr… the answer should be positive.\n\nassert a_div_b(-4, -2) &gt; 0"
  },
  {
    "objectID": "swd3.html#bringing-it-all-together",
    "href": "swd3.html#bringing-it-all-together",
    "title": "arctraining slides",
    "section": "Bringing it all together",
    "text": "Bringing it all together\nThe Hypotenuse Problem\nCalculating the hypotenuse\n\\[ c = \\sqrt{a^2 + b^2} \\]\nGeneral Design\n\n1 squared function\n1 sum function\n1 square root function\n1 hypotenuse function that uses the other functions"
  },
  {
    "objectID": "swd3.html#workflow",
    "href": "swd3.html#workflow",
    "title": "arctraining slides",
    "section": "Workflow",
    "text": "Workflow\n\nInstall Git, Anaconda, VScode\nCreate a GitHub repository + Licence + .gitignore + Readme\nSetup GH Action for testing (Python Application)\nClone GH repository in local machine\nCreate project structure (source and test folders)\nSetup tests (start with test_)\nDevelop code\nAdd docstring (you can use autoDocstring - Python Docstring Generator on VS Code)\nLint code and tests\nPush to github\nEXTRA: Create Sphinx documentation\nEXTRA: Setup file and local install\nEXTRA: GH Release"
  },
  {
    "objectID": "swd3.html#extra-sphinx-documentation",
    "href": "swd3.html#extra-sphinx-documentation",
    "title": "arctraining slides",
    "section": "Extra: Sphinx documentation",
    "text": "Extra: Sphinx documentation\n\nCreate docstring for every function\nInstall sphinx\nStart the basic structure using: $ sphinx-quickstart docs\nUse the apidoc to get docstrings: $ sphinx-apidoc -o docs .\nEdit files:\n\n\nconf.pyindex.rstdependencies.rstusage.rstfunctions.rst\n\n\n\nadd extentions: 'sphinx.ext.todo', 'sphinx.ext.viewcode', 'sphinx.ext.autodoc'.\nchange theme: sphinx_rtd_theme\nadd the src (change the folder name as necessary!) folder as path:\n\n import os\n import sys\n sys.path.insert(0, os.path.abspath('../src'))\n\n\nAdd extra files after Contents\n.. toctree::\n   :maxdepth: 2\n   :caption: Contents:\n\n   dependencies\n   usage\n   functions\n\n\nList all your dependencies:\nDependencies\n============\n\n- python\n- pytest\n- flake8\n- black\n- sphinx\n\n\nExplain how to use your software\nUsage Guide\n============\n\nTo start working with this repository you need to clone it onto your local\nmachine: ::\n\n    $ git clone https://github.com/...\n\n\nNext ...\n\n\nCreate a function file with the following:\nAPI reference\n=============\n\n.. automodule:: calc\n   :members:\n   :undoc-members:\n   :show-inheritance:"
  },
  {
    "objectID": "swd3.html#extra-documentation-action",
    "href": "swd3.html#extra-documentation-action",
    "title": "arctraining slides",
    "section": "Extra: documentation Action",
    "text": "Extra: documentation Action\nCreate a new GH action to create a nice website for your documentation.\n\nThe action is available here\nYou may need update GH Actions permissions to allow write\nAfter a successful documentation action, you need to select gh-pages branch to activate your website"
  },
  {
    "objectID": "swd3.html#extra-setup-file",
    "href": "swd3.html#extra-setup-file",
    "title": "arctraining slides",
    "section": "Extra: Setup file",
    "text": "Extra: Setup file\nCreate a setup.py file like:\nimport setuptools\n\nwith open(\"README.md\", \"r\") as fh:\n    long_description = fh.read()\n\nsetuptools.setup(\n    name=\"hypot\",\n    version=\"0.1.0\",\n    author=\"Patricia Ternes\",\n    author_email=\"p.ternesdallagnollo@leeds.ac.uk\",\n    description=\"The hypot SWD3 demo package\",\n    packages=setuptools.find_packages(),\n    classifiers=[\n        \"Programming Language :: Python :: 3.9\",\n        \"Intended Audience :: Science/Research/Learning\",\n    ],\n    python_requires=\"&gt;=3.9\",\n)"
  },
  {
    "objectID": "swd3.html#local-installation",
    "href": "swd3.html#local-installation",
    "title": "arctraining slides",
    "section": "Local Installation",
    "text": "Local Installation\nInstall: install the hypot package into the environment using:\n$ python setup.py install\nUsage: if you want to create a personalised script, you can import the hypot modules as follows:\nfrom hypot.calc import squared, addition, sqroot\nRemove: If you want to remove your package, use pip:\n$ pip uninstall hypot"
  },
  {
    "objectID": "swd3.html#release",
    "href": "swd3.html#release",
    "title": "arctraining slides",
    "section": "Release",
    "text": "Release\nRelease in GitHub are based in tags with the following structure:\nv0.5.2\n\n\n\nChange\nRelease\nExample\n\n\n\n\nMajor\nBreaking\n0\n\n\nMinor\nFeature\n5\n\n\nPatch\nFix\n2\n\n\n\n\n\nResearch IT Website | Research IT Query | Courses Material"
  },
  {
    "objectID": "swd3/good-practices.html",
    "href": "swd3/good-practices.html",
    "title": "arctraining slides",
    "section": "",
    "text": "If application A needs version 1.0 of a particular module but application B needs version 2.0, then the requirements are in conflict and installing either version 1.0 or 2.0 will leave one application unable to run.\nThe solution for this problem is to create a virtual environment, a self-contained directory tree that contains installation for particular versions of software/packages.\n\n\n\nConda is an open source package management system and environment management system that runs on Windows, macOS, and Linux.\nIt offers dependency and environment management for any language—Python, R, Ruby, Lua, Scala, Java, JavaScript, C/ C++, Fortran, and more.\nEasy user install via Anaconda."
  },
  {
    "objectID": "swd3/good-practices.html#virtual-environments",
    "href": "swd3/good-practices.html#virtual-environments",
    "title": "arctraining slides",
    "section": "",
    "text": "If application A needs version 1.0 of a particular module but application B needs version 2.0, then the requirements are in conflict and installing either version 1.0 or 2.0 will leave one application unable to run.\nThe solution for this problem is to create a virtual environment, a self-contained directory tree that contains installation for particular versions of software/packages.\n\n\n\nConda is an open source package management system and environment management system that runs on Windows, macOS, and Linux.\nIt offers dependency and environment management for any language—Python, R, Ruby, Lua, Scala, Java, JavaScript, C/ C++, Fortran, and more.\nEasy user install via Anaconda."
  },
  {
    "objectID": "swd3/good-practices.html#code-formatting",
    "href": "swd3/good-practices.html#code-formatting",
    "title": "arctraining slides",
    "section": "Code formatting",
    "text": "Code formatting\n# myscript.py:\nx = {  'a':37,'b':42,\n'c':927}\ny = 'hello '+       'world'\nclass foo  (     object  ):\n   def f    (self   ):\n       return       y **2\n   def g(self, x :int,\n       y : int=42\n       ) -&gt; int:\n       return x--y\ndef f  (   a ) :\n   return      37+-a[42-a :  y*3]"
  },
  {
    "objectID": "swd3/good-practices.html#coding-conventions",
    "href": "swd3/good-practices.html#coding-conventions",
    "title": "arctraining slides",
    "section": "Coding conventions",
    "text": "Coding conventions\nIf your language or project has a standard policy, use that. For example:\n\nPython: PEP8\nR: Google’s guide for R, tidyverse style guide\nC++: Google’s style guide\nJulia: Official style guide"
  },
  {
    "objectID": "swd3/good-practices.html#linters",
    "href": "swd3/good-practices.html#linters",
    "title": "arctraining slides",
    "section": "Linters",
    "text": "Linters\nLinters are automated tools which enforce coding conventions and check for common mistakes. For example:\n\nPython:\n\nflake8 (flags any syntax/style errors)\nblack (enforces the style)\nisort (“Sorts” imports alphabetically in groups)"
  },
  {
    "objectID": "swd3/good-practices.html#example-flake8-linter",
    "href": "swd3/good-practices.html#example-flake8-linter",
    "title": "arctraining slides",
    "section": "Example: Flake8 Linter",
    "text": "Example: Flake8 Linter\n$ conda install flake8\n$ flake8 myscript.py\nmyscript.py:2:6: E201 whitespace after '{'\nmyscript.py:2:11: E231 missing whitespace after ':'\nmyscript.py:2:14: E231 missing whitespace after ','\nmyscript.py:2:18: E231 missing whitespace after ':'\nmyscript.py:3:1: E128 continuation line under-indented for visual indent\nmyscript.py:3:4: E231 missing whitespace after ':'\nmyscript.py:4:13: E225 missing whitespace around operator\nmyscript.py:4:14: E222 multiple spaces after operator\nmyscript.py:5:1: E302 expected 2 blank lines, found 0\nmyscript.py:5:13: E201 whitespace after '('\nmyscript.py:5:25: E202 whitespace before ')'\nmyscript.py:6:4: E111 indentation is not a multiple of 4\nmyscript.py:6:9: E211 whitespace before '('\nmyscript.py:6:20: E202 whitespace before ')'\nmyscript.py:7:8: E111 indentation is not a multiple of 4\nmyscript.py:7:14: E271 multiple spaces after keyword\nmyscript.py:7:25: E225 missing whitespace around operator\nmyscript.py:8:4: E301 expected 1 blank line, found 0\nmyscript.py:8:4: E111 indentation is not a multiple of 4\nmyscript.py:8:17: E203 whitespace before ':'\nmyscript.py:8:18: E231 missing whitespace after ':'\nmyscript.py:9:8: E128 continuation line under-indented for visual indent\nmyscript.py:9:9: E203 whitespace before ':'\nmyscript.py:9:15: E252 missing whitespace around parameter equals\nmyscript.py:9:16: E252 missing whitespace around parameter equals\nmyscript.py:10:8: E124 closing bracket does not match visual indentation\nmyscript.py:10:8: E125 continuation line with same indent as next logical line\nmyscript.py:11:8: E111 indentation is not a multiple of 4\nmyscript.py:12:1: E302 expected 2 blank lines, found 0\nmyscript.py:12:6: E211 whitespace before '('\nmyscript.py:12:9: E201 whitespace after '('\nmyscript.py:12:13: E202 whitespace before ')'\nmyscript.py:12:15: E203 whitespace before ':'\nmyscript.py:13:4: E111 indentation is not a multiple of 4\nmyscript.py:13:10: E271 multiple spaces after keyword\nmyscript.py:13:26: E203 whitespace before ':'\nmyscript.py:13:34: W291 trailing whitespace"
  },
  {
    "objectID": "swd3/good-practices.html#example-black-code-formatter",
    "href": "swd3/good-practices.html#example-black-code-formatter",
    "title": "arctraining slides",
    "section": "Example: Black Code Formatter",
    "text": "Example: Black Code Formatter\n\nInstall and run Black\n\n$ conda install black\n$ black myscript.py\n\nCheck the file!\n\n# myscript.py:\nx = {\"a\": 37, \"b\": 42, \"c\": 927}\ny = \"hello \" + \"world\"\n\n\nclass foo(object):\n    def f(self):\n        return y**2\n\n    def g(self, x: int, y: int = 42) -&gt; int:\n        return x - -y\n\n\ndef f(a):\n    return 37 + -a[42 - a : y * 3]"
  },
  {
    "objectID": "swd3/good-practices.html#ide",
    "href": "swd3/good-practices.html#ide",
    "title": "arctraining slides",
    "section": "IDE",
    "text": "IDE\nUsing an Integrated development environment (IDE) will certainly save you time, but the advantages of using an IDE go beyond that. Below are some IDE advantages\n\nSyntax highlighting\nText autocompletion\nRefactoring options\nEasily Importing libraries\nBuild, compile, or run\n\n\nVisual Studio Code\nTo install VS Code follow the instructions here."
  },
  {
    "objectID": "swd3/good-practices.html#vsc-example-automatically-using-black",
    "href": "swd3/good-practices.html#vsc-example-automatically-using-black",
    "title": "arctraining slides",
    "section": "VSC Example: automatically using black",
    "text": "VSC Example: automatically using black\nConfigure VSC to use Black: Code (or File) &gt; Preferences &gt; Settings\n\nSearch for python formatting provider and choose black\nSearch for format on save and check the box to enable\n\nSelect interpreter: View &gt; Command Palette.. (or Ctrl+Shift+P)\n\nSearch for Python: Select Interpreter\nChoose the correct environment\n\nNow the Black package is going to fix your codes layout every time you save a code file."
  },
  {
    "objectID": "swd3/good-practices.html#version-control",
    "href": "swd3/good-practices.html#version-control",
    "title": "arctraining slides",
    "section": "Version Control",
    "text": "Version Control\n\n\n\nPiled Higher and Deeper by Jorge Cham"
  },
  {
    "objectID": "swd3/good-practices.html#test-driven-development",
    "href": "swd3/good-practices.html#test-driven-development",
    "title": "arctraining slides",
    "section": "Test-driven development",
    "text": "Test-driven development\nExample, suppose we need to find the result of a number divided by another number:\n\nNaive solutionTDD solution\n\n\n\nWrite a function a_div_b.\nCall it interactively on two or three different inputs.\nIf it produces the wrong answer, fix the function and re-run that test.\n\nThis clearly works — after all, thousands of scientists are doing it right now — but there’s a better way\n\n\n\nWrite a short function for each test.\nWrite a a_div_b function that should pass those tests.\nIf a_div_b produces any wrong answers, fix it and re-run the test functions.\n\nWriting the tests before writing the function they exercise is called test-driven development (TDD). Its advocates believe it produces better code faster because:\n\nIf people write tests after writing the thing to be tested, they are subject to confirmation bias, i.e., they subconsciously write tests to show that their code is correct, rather than to find errors.\nWriting tests helps programmers figure out what the function is actually supposed to do."
  },
  {
    "objectID": "swd3/good-practices.html#possible-tests-a_div_b-example",
    "href": "swd3/good-practices.html#possible-tests-a_div_b-example",
    "title": "arctraining slides",
    "section": "Possible tests: a_div_b example",
    "text": "Possible tests: a_div_b example\nLet’s think in all possible scenarios for this problem and how we could test them.\n\nBigger by smallerSmaller by biggerNegative numbers\n\n\n\nUsing 4 and 2, the answer should be 2.\n\nassert a_div_b(4, 2) == 2\n\nOr… the answer should be larger than 1.\n\nassert a_div_b(8, 7) &gt; 1\n\n\n\nUsing 2 and 4, the answer should be 0.5.\n\nassert a_div_b(2, 4) == 0.5\n\nOr… the answer should be smaller than 1.\n\nassert a_div_b(7, 8) &lt; 1\n\n\n\nUsing -4 and -2, the answer should be 2.\n\nassert a_div_b(-4, -2) == 2\n\nOr… the answer should be positive.\n\nassert a_div_b(-4, -2) &gt; 0"
  },
  {
    "objectID": "swd3/structure.html",
    "href": "swd3/structure.html",
    "title": "arctraining slides",
    "section": "",
    "text": "# The most basic structure for a code project should look like:\nmy-model\n├── README.md\n├── requirements.txt\n├── src                &lt;- Source code for this project\n└── tests              &lt;- Test code for this project\n\nReadmeRequirements\n\n\n\nIs a guide that gives users a detailed description of a project you have worked on\nIt is the first file a person will see when they encounter your project, so it should be fairly brief but detailed.\nSee how to write a good README file in this freecodecamp post.\n\n\n\n\nText information about all the necessary additional libraries, modules, and packages.\nThis can be replaced by files like: environment.yml, pyproject.toml, setup.py."
  },
  {
    "objectID": "swd3/structure.html#basic-structure-suggestion",
    "href": "swd3/structure.html#basic-structure-suggestion",
    "title": "arctraining slides",
    "section": "",
    "text": "# The most basic structure for a code project should look like:\nmy-model\n├── README.md\n├── requirements.txt\n├── src                &lt;- Source code for this project\n└── tests              &lt;- Test code for this project\n\nReadmeRequirements\n\n\n\nIs a guide that gives users a detailed description of a project you have worked on\nIt is the first file a person will see when they encounter your project, so it should be fairly brief but detailed.\nSee how to write a good README file in this freecodecamp post.\n\n\n\n\nText information about all the necessary additional libraries, modules, and packages.\nThis can be replaced by files like: environment.yml, pyproject.toml, setup.py."
  },
  {
    "objectID": "swd3/structure.html#advanced-project-structure",
    "href": "swd3/structure.html#advanced-project-structure",
    "title": "arctraining slides",
    "section": "Advanced Project Structure",
    "text": "Advanced Project Structure\nTemplate based on mkrapp/cookiecutter-reproducible-science github\n.\n├── AUTHORS.md\n├── LICENSE\n├── README.md\n├── bin                &lt;- Your compiled model code can be stored here (not tracked by git)\n├── config             &lt;- Configuration files, e.g., for doxygen or for your model if needed\n├── data\n│   ├── external       &lt;- Data from third party sources.\n│   ├── interim        &lt;- Intermediate data that has been transformed.\n│   ├── processed      &lt;- The final, canonical data sets for modeling.\n│   └── raw            &lt;- The original, immutable data dump.\n├── docs               &lt;- Documentation, e.g., doxygen or scientific papers (not tracked by git)\n├── notebooks          &lt;- Ipython or R notebooks\n├── reports            &lt;- For a manuscript source, e.g., LaTeX, Markdown, etc., or any project reports\n│   └── figures        &lt;- Figures for the manuscript or reports\n├── src                &lt;- Source code for this project\n│   ├── data           &lt;- scripts and programs to process data\n│   ├── external       &lt;- Any external source code, e.g., pull other git projects, or external libraries\n│   ├── models         &lt;- Source code for your own model\n│   ├── tools          &lt;- Any helper scripts go here\n│   └── visualization  &lt;- Scripts for visualisation of your results, e.g., matplotlib, ggplot2 related.\n└── tests              &lt;- Test code for this project"
  }
]