---
format:
  revealjs:
    self-contained: true
    navigation-mode: linear
    controls-layout: bottom-right
    controls: false
    footer: "[Research IT Website]({{< var rc.website >}}) | [Research IT Query]({{< var rc.servicedesk >}}) | [Courses Material]({{< var rc.material >}}) | [Cheat sheet](#cheat-sheet)"
code: HPC 0
name: Introduction to Linux for HPC
---


{{< include _title.qmd >}}

## Introduction to Linux

Aims of this training:

- Introduce you to using command line interface (CLI) Linux
- Build your confidence in navigating Linux file systems using the command line
- Enable you to use Linux without a graphical user interface (GUI)
- Prepare you for [HPC1: Introduction to High Performance Computing](https://arc.leeds.ac.uk/training/courses/hpc1/)

::: {.notes}
- This is a brief, introductory level session. 
- Do not assume knowledge of file systems/directory structures/other computing background.
:::

## Format of this course

This is a **2.5 hour tutorial**. We will be trying out what we are learning, so be ready for some typing!

These lecture slides are based on the [Software Carpentries documentation on Unix Shell basics](https://swcarpentry.github.io/shell-novice/), but use different examples to learn the same commands.

Once you finish this tutorial, we recommend you read through the extended notes available and follow through the tutorial there: you can do this work from the same *virtual machine* we will be using today.

## Format of these slides {.smaller}

- Everything you need for this session is in these slides.
- We recommend you have a copy open on your computer.
- If you have enough room on your screen, have these notes and your command line side-by-side.
- These notes should also be viewable via mobile if you don't mind not being able to copy and paste!
- There is a quick reference [cheat sheet](#cheat-sheet) linked in the footer; you can return to your place in the slideshow from this cheat sheet using the back button.

## Syllabus

- Introduction to the command line and common terminology

## Interacting with a computer {.smaller}

When we use a computer, we interact with the hardware through an **operating system** or **OS**.

Common operating systems for research computers include:

- Microsoft Windows
- MacOS
- Linux

We are going to be looking at Linux today, which is a family of operating systems that are **Open Source** and are widely used in research, for example on **High Performance Computing** platforms like ARC4 or Aire.

## Interacting with a computer {.smaller}

When we use a computer, like our desktop or laptop, we often use a **Graphical User Interface** or a **GUI**.

- GUIs allow us to interact with a computer through graphical means: icons, text, buttons, windows. GUIs usually involve using a mouse and clicking into menus.
- The Windows desktop and MacOS desktop are GUIs that let you control the computer graphically.
- Many computer programs also have GUIs: for example, Excel.

![](assets/img/linux101/excel-gui.png){fig-align="center" fig-alt="A screenshot of Excel."}

## Interacting with a computer {.smaller}

As well as using a GUI, we can also interact with computers using a **Command Line Interface** or a **CLI**.

- CLIs allow us to interact with a computer through text-based commands typed into the command-line.
- While GUIs can be simple and intuitive to use, they can make it difficult to reproduce workflows:
  - Sometimes you have to record by hand (or with a screen recording) what sub-options from different menus you used;
  - Updates to GUIs can make it difficult to find the same menu options;
  - A workflow with multiple steps can be tedious to repeat for multiple datasets (having to click through multiple layers of menu options for each dataset).
- Many large research machines (such as the HPC machines ARC4 and Aire here at Leeds) *do not have a GUI* and so you need to interact with them through a **CLI**.

## Command Line Interfaces {.smaller}

- There are multiple different CLIs available:
  - General-purpose CLIs are available for each **Operating System** for general computer control:
    - Windows Command Prompt;
    - Windows Powershell;
    - Mac Terminal;
  - Some specific programs have their own custom CLIs:
    - Anaconda Prompt for Windows;
    - Git Bash for Windows;
- Today, we are going to be using a **Unix Shell**:
  - This is the general-purpose CLI that underpins both Linux and Mac;
  - We will use Bash, a popular Unix Shell.

## Poll

Throughout this presentation, we will be using quick polls to gauge your familiarity with concepts.

Let's test it out:

[Click here to go to Poll](https://universityofleeds.display.vevox.com#/present/696636/ULXGUZROA4XT20VKGCAZ){target="_blank"}


## Bash {.smaller}

How do we access Bash?

- Bash is the default shell on Unix systems like Linux or Mac
- Bash is also available through many command-line tools for Windows:
  - Git Bash for Windows
  - Anaconda Prompt

We're going to use a **virtual machine** for this course: this is a Linux machine running in the cloud.

This means that everyone here can run it with the exact same set-up; you only need a browser.

## File system on Linux

```{mermaid}
%%| fig-align: center
---
config:
  look: handDrawn
---
%%{init: {'themeVariables': { 'fontSize': '32px', 'padding': '40px'}}}%%
flowchart
    
    / o--obin
    / o--odev
    / o--oetc
    / o--ohome
    home o--omy-username
    home o--omy-friend
    / o--otmp

    my-username o--o all_my_files
```

Each rectangle is a folder or **directory** (**dir** for short)

::: {.notes}
- This shows a sketch of a file system.
- We have a hierarchy of folders or directories sitting inside one another.
:::

## File system on Linux

```{mermaid}
%%| fig-align: center
---
config:
  look: handDrawn
---
%%{init: {'themeVariables': { 'fontSize': '32px', 'padding': '40px'}}}%%
flowchart
    
    / o--obin
    / o--odev
    / o--oetc
    / o--ohome
    home o--omy-username
    home o--omy-friend
    / o--otmp

    my-username o--o all_my_files

    style / fill:#f9f,stroke:#333,stroke-width:10px,color:#333
```

Each rectangle is a folder or **directory** (**dir** for short)

::: {.notes}
- This branching system starts from the root (the forward slash) at the very top
- Inside this root directory, we have a bunch of system folders - we don't need to worry about these now.
:::

## File system on Linux

```{mermaid}
%%| fig-align: center
---
config:
  look: handDrawn
---
%%{init: {'themeVariables': { 'fontSize': '32px', 'padding': '40px'}}}%%
flowchart
    
    / o--obin
    / o--odev
    / o--oetc
    / o--ohome
    home o--omy-username
    home o--omy-friend
    / o--otmp

    my-username o--o all_my_files

    style home fill:#f9f,stroke:#333,stroke-width:10px,color:#333
```

Each rectangle is a folder or **directory** (**dir** for short)

::: {.notes}
- One of the directories is called "home": ths contains all the home directories of users.
- The home directories are usually called after their owner's username.
- If you look in this directory on a personal or family computer, you might find a handful of user home directories
- If you look at this directory on a university HPC system, like Aire, you'll find hundreds of user home directories
:::

## File system on Linux

```{mermaid}
%%| fig-align: center
%%| fig-width: 100%
---
config:
  look: handDrawn
---
%%{init: {'themeVariables': { 'fontSize': '32px', 'padding': '40px'}}}%%
flowchart
    
    / o--obin
    / o--odev
    / o--oetc
    / o--ohome
    home o--omy-username
    home o--omy-friend
    / o--otmp

    my-username o--o all_my_files

    style my-username fill:#f9f,stroke:#333,stroke-width:10px,color:#333
```

The `my-username` folder is your **user home directory**

::: {.notes}
- Confusingly, we refer to this highlighted directory as your *home* directory
- Even though there is a folder one level up that is called home!
:::

## File system on Linux

```{mermaid}
%%| fig-align: center
%%| fig-width: 100%
---
config:
  look: handDrawn
---
%%{init: {'themeVariables': { 'fontSize': '32px', 'padding': '40px'}}}%%
flowchart
    
    / o--obin
    / o--odev
    / o--oetc
    / o--ohome
    home o--omy-username
    home o--omy-friend
    / o--otmp

    my-username o--o all_my_files

    style my-username fill:#f9f,stroke:#333,stroke-width:10px,color:#333
```

How do we describe the address of this home directory?

::: {.notes}
- How do we describe where this directory or folder is?
- We describe it in a similar way to a website URL, using it's path
- We need to know all the folders directly above it...
- You've already used folders and directories if you've ever saved a file from Word or Excel, or opened a pdf in your browser.
:::

## File system on Linux

```{mermaid}
%%| fig-align: center
%%| fig-width: 100%
---
config:
  look: handDrawn
---
%%{init: {'themeVariables': { 'fontSize': '32px', 'padding': '40px'}}}%%
flowchart
    
    / o--obin
    / o--odev
    / o--oetc
    / o--ohome
    home o--omy-username
    home o--omy-friend
    / o--otmp

    my-username o--o all_my_files

    style my-username fill:#f9f,stroke:#333,stroke-width:10px,color:#333
    style home fill:#f9f,stroke:#333,stroke-width:10px,color:#333
    style / fill:#f9f,stroke:#333,stroke-width:10px,color:#333
```

The folders in the address are `/`, `home` and `my-username`

::: {.notes}
- Above our username directory, we have home and the root (which is denoted by just a forward slash)
:::

## File system on Linux

```{mermaid}
%%| fig-align: center
%%| fig-width: 100%
---
config:
  look: handDrawn
---
%%{init: {'themeVariables': { 'fontSize': '32px', 'padding': '40px'}}}%%
flowchart
    
    / o--obin
    / o--odev
    / o--oetc
    / o--ohome
    home o--omy-username
    home o--omy-friend
    / o--otmp

    my-username o--o all_my_files

    style my-username fill:#f9f,stroke:#333,stroke-width:10px,color:#333
    style home fill:#f9f,stroke:#333,stroke-width:10px,color:#333
    style / fill:#f9f,stroke:#333,stroke-width:10px,color:#333
```

Stick them together like a URL: `/home/my-username`

::: {.notes}
- We just have to put them together like a web address (because the internet is basically just a giant file structure)
:::

## File system on Linux

On Windows, file paths use backlashes ( `\` ) instead of forward slashes (`/`)!

- This can cause confusion and errors if you are writing scripts that load in data from certain file paths, and need to use both Windows and Linux!
- Thankfully there are lots of ways around this, including libraries for handling paths in Python and R

::: {.notes}
- It's useful to note that Windows uses slashes in the opposite direction for file paths.
- We're not going to focus on this today as we are using only Linux
- But if you get an error while coding it's useful to keep this in mind.
:::

## File system on Linux

```{mermaid}
%%| fig-align: center
%%| fig-width: 100%
---
config:
  look: handDrawn
---
%%{init: {'themeVariables': { 'fontSize': '32px', 'padding': '40px'}}}%%
flowchart
    
    / o--obin
    / o--odev
    / o--oetc
    / o--ohome
    home o--omy-username
    home o--omy-friend
    / o--otmp

    my-username o--o all_my_files

    style my-username fill:#f9f,stroke:#333,stroke-width:10px,color:#333
    style home fill:#f9f,stroke:#333,stroke-width:10px,color:#333
    style / fill:#f9f,stroke:#333,stroke-width:10px,color:#333
```

Stick them together like a URL: `/home/my-username`

::: {.notes}
- Back to our file system.
- Today, everything we are doing will be in our home directory, so let's just focus on that!
- When you log in to a linux system, this is usually where you will be dropped!
:::

## File system on Linux

```{mermaid}
%%| fig-align: center
%%| fig-width: 100%
---
config:
  look: handDrawn
---
%%{init: {'themeVariables': { 'fontSize': '32px', 'padding': '40px'}}}%%
flowchart
    
    / o--ohome
    home o--omy-username

    my-username o--o all_my_files

    style my-username fill:#f9f,stroke:#333,stroke-width:10px,color:#333
    style home fill:#f9f,stroke:#333,stroke-width:10px,color:#333
    style / fill:#f9f,stroke:#333,stroke-width:10px,color:#333
```

`/home/my-username/all_my_files` is a bit long...

::: {.notes}
- Typing the full path to our files and folders is a bit tedious
- lets look at a shorter way
:::

## File system on Linux

::: {layout-ncol=2}
```{mermaid}
%%| fig-align: center
%%| fig-width: 100%
---
config:
  look: handDrawn
---
%%{init: {'themeVariables': { 'fontSize': '32px', 'padding': '40px'}}}%%
flowchart
    
    / o--ohome
    home o--omy-username

    my-username o--o all_my_files

    style my-username fill:#f9f,stroke:#333,stroke-width:10px,color:#333
    style home fill:#f9f,stroke:#333,stroke-width:10px,color:#333
    style / fill:#f9f,stroke:#333,stroke-width:10px,color:#333
```

```{mermaid}
%%| fig-align: center
%%| fig-width: 100%
---
config:
  look: handDrawn
---
%%{init: {'themeVariables': { 'fontSize': '32px', 'padding': '40px'}}}%%
flowchart
    
    home["~"] o--o all_my_files

    style home fill:#f9f,stroke:#333,stroke-width:10px,color:#333

```
:::

`/home/my-username/all_my_files` is a bit long...

::: {.notes}
- Typing the full path to our files and folders is a bit tedious
- lets look at a shorter way
:::

## File system on Linux

```{mermaid}
%%| fig-align: center
%%| fig-width: 100%
---
config:
  look: handDrawn
---
%%{init: {'themeVariables': { 'fontSize': '32px', 'padding': '40px'}}}%%
flowchart
    
    home["~"] o--o all_my_files

    style home fill:#f9f,stroke:#333,stroke-width:10px,color:#333
```


- To save us from typing out `/home/my-username` every time we refer to a directory or file, we can use the shortcut `~`, called a *tilde*
- This turns `/home/my-username/all_my_files` to `~/all_my_files`

## Let's explore some files!

Time to explore some files on a Linux system!

```{mermaid}
%%| fig-align: center
%%| fig-width: 100%
---
config:
  look: handDrawn
---
%%{init: {'themeVariables': { 'fontSize': '28px'}}}%%
flowchart TD
    A["home/vscode/ <br> or ~"] o--o B[red-folder]
    A o--o C[pink-folder]
    A o--o D[blue-folder]

    B o--o r1([red-1.txt ])
    B o--o r2([red-2.txt ])
    B o--o r3([red-3.txt ])

    C o--o P1[pink-sub-folder]
    C o--o p2(["pink-file.md <br>"])
    C o--o p3{{"say_hi.sh <br>"}}

    P1 o--o p4(["**helloworld.py** <br>"])
    P1 o--o p5(["pink-data.csv <br>"])

    D o--o b1(["**blue.r** <br>"])

```

## Using our custom virtual machine {.smaller}

For this course, we've built a custom virtual machine for you to use.

This requires a **GitHub** account which you were asked to set up before this course.

(Don't worry if you haven't - please go and quickly sign up to [GitHub](https://github.com/signup) now!)

- There are many other ways to access the bash shell, such as on one of the HPC systems here at Leeds, or by installing [git bash](https://git-scm.com/downloads/win) on Windows, or using the terminal on Linux or Mac.
- We want everyone in the class to have the same directory structure and environment which is why we are using a virtual machine!

## Launch virtual machine

Insert instructions here

## Launch virtual machine

Insert instructions here

## Very first command: `cd`

We're going to use the `cd` command to bring us to our home directory.


## Directory map {.smaller .scrollable #map}

Use the back button in your browser to return to the slide you were previously on.
```{mermaid}
flowchart TD
    START:::hidden --> |cd|A
    A[home/vscode/] -->|cd red-folder| B[red-folder/ ]
    A[home/vscode/] -->|cd pink-folder| C[pink-folder/ ]
    A[home/vscode/] -->|cd blue-folder| D[blue-folder/ ]

    B --- r1([red-1.txt ])
    B --- r2([red-2.txt ])
    B --- r3([red-3.txt ])

    C --- |cd pink-sub-folder|P1[pink-sub-folder/ ]
    C --- p2([pink-file.md ])
    C --- |./say_hi.sh|p3{{say_hi.sh }}

    P1 --- |python helloworld.py|p4([**helloworld.py** ])
    P1 --- p5([pink-data.csv ])

    D --- |Rscript blue.r|b1([**blue.r** ])

```

Scroll down to see key:

```{mermaid}
flowchart TD
  E[folder] -->|CLI argument|F([file])
  E[folder] -->|CLI argument|G{{executable}}
```

You can use `cat filename` to print out the content of a file, or `nano filename` to open the nano text editor.
You can also use `code filename` to open it in vscode on your virtual machine.

On the HPC system, you'll likely use `nano` to edit code if you ever need to.


## Cheat Sheet {.smaller .scrollable #cheat-sheet background-color="#f5e0fd"}

Use the back button in your browser to return to the slide you were previously on.

**If you are lost, you can always `cd` home!**

| Command | Description |
| :--- | :--- |
| `cd` | Change directory to home |
| `cd dir-name` | Change directory to `dir-name` |
| `pwd` | Print the current working directory - where am I? |
| `name --help` | Load the manual for `name` - on Codespaces |
| `man name` | Load the manual for `name` - on Aire/ARC |
| `ls` | List the contents of a directory |
| `mkdir` | Make a new directory |

Some more `cd` commands:

| Command | Description |
| :--- | :--- |
| `cd ..` | Go up a level to the parent directory |
| `cd -` | Go back to the previous directory |
| `cd ~/dir-name` | Go to `dir-name`, a directory in the home directory |

Some more `ls` commands:

| Command | Description |
| :--- | :--- |
| `ls -F` | List the contents of a dir, with symbols for content type |
| `ls -a` | List *all* contents, including hidden files and directories |

::: footer
<!-- Remove footer from this page -->
:::