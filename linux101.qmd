---
format:
  revealjs:
    self-contained: true
    navigation-mode: linear
    controls-layout: bottom-right
    controls: false
    footer: "[Research IT Website]({{< var rc.website >}}) | [Research IT Query]({{< var rc.servicedesk >}}) | [Courses Material]({{< var rc.material >}}) | [Cheat sheet](#cheat-sheet)"
code: HPC 0
name: Introduction to Linux for HPC
---


{{< include _title.qmd >}}

## Introduction to Linux

Aims of this training:

- Introduce you to using command line interface (CLI) Linux
- Build your confidence in navigating Linux file systems using the command line
- Enable you to use Linux without a graphical user interface (GUI)
- Prepare you for [HPC1: Introduction to High Performance Computing](https://arc.leeds.ac.uk/training/courses/hpc1/)

::: {.notes}
- This is a brief, introductory level session. 
- Do not assume knowledge of file systems/directory structures/other computing background.
:::

## Format of this course

This is a **2.5 hour tutorial**. We will be trying out what we are learning, so be ready for some typing!

These lecture slides are based on the [Software Carpentries documentation on Unix Shell basics](https://swcarpentry.github.io/shell-novice/), but use different examples to learn the same commands.

Once you finish this tutorial, we recommend you read through the extended notes available and follow through the tutorial there: you can do this work from the same *virtual machine* we will be using today.

## Format of these slides {.smaller}

- Everything you need for this session is in these slides.
- We recommend you have a copy open on your computer.
- If you have enough room on your screen, have these notes and your command line side-by-side.
- These notes should also be viewable via mobile if you don't mind not being able to copy and paste!
- There is a quick reference [cheat sheet](#cheat-sheet) linked in the footer; you can return to your place in the slideshow from this cheat sheet using the back button.

## Syllabus

- Interacting with a computer: operating systems, GUIs and CLIs, bash
- File systems on Linux
- Navigating filesystems from the command line
- Creating and editing files and directories
- Running simple scripts

## Interacting with a computer {.smaller}

When we use a computer, we interact with the hardware through an **operating system** or **OS**.

Common operating systems for research computers include:

- Microsoft Windows
- MacOS
- Linux

We are going to be looking at Linux today, which is a family of operating systems that are **Open Source** and are widely used in research, for example on **High Performance Computing** platforms like ARC4 or Aire.

## Interacting with a computer {.smaller}

When we use a computer, like our desktop or laptop, we often use a **Graphical User Interface** or a **GUI**.

- GUIs allow us to interact with a computer through graphical means: icons, text, buttons, windows. GUIs usually involve using a mouse and clicking into menus.
- The Windows desktop and MacOS desktop are GUIs that let you control the computer graphically.
- Many computer programs also have GUIs: for example, Excel.

![](assets/img/linux101/excel-gui.png){fig-align="center" fig-alt="A screenshot of Excel."}

## Interacting with a computer {.smaller}

As well as using a GUI, we can also interact with computers using a **Command Line Interface** or a **CLI**.

- CLIs allow us to interact with a computer through text-based commands typed into the command-line.
- While GUIs can be simple and intuitive to use, they can make it difficult to reproduce workflows:
  - Sometimes you have to record by hand (or with a screen recording) what sub-options from different menus you used;
  - Updates to GUIs can make it difficult to find the same menu options;
  - A workflow with multiple steps can be tedious to repeat for multiple datasets (having to click through multiple layers of menu options for each dataset).
- Many large research machines (such as the HPC machines ARC4 and Aire here at Leeds) *do not have a GUI* and so you need to interact with them through a **CLI**.

## Command Line Interfaces {.smaller}

- There are multiple different CLIs available:
  - General-purpose CLIs are available for each **Operating System** for general computer control:
    - Windows Command Prompt;
    - Windows Powershell;
    - Mac Terminal;
  - Some specific programs have their own custom CLIs:
    - Anaconda Prompt for Windows;
    - Git Bash for Windows;
- Today, we are going to be using a **Unix Shell**:
  - This is the general-purpose CLI that underpins both Linux and Mac;
  - We will use Bash, a popular Unix Shell.

## Poll

Throughout this presentation, we will be using quick polls to gauge your familiarity with concepts.

Let's test it out:

[Click here to go to Poll](https://universityofleeds.display.vevox.com#/present/696636/ULXGUZROA4XT20VKGCAZ){target="_blank"}


## Bash {.smaller}

How do we access Bash?

- Bash is the default shell on Unix systems like Linux or Mac
- Bash is also available through many command-line tools for Windows:
  - Git Bash for Windows
  - Anaconda Prompt

We're going to use a **virtual machine** for this course: this is a Linux machine running in the cloud.

This means that everyone here can run it with the exact same set-up; you only need a browser.

## File system on Linux

```{mermaid}
%%| fig-align: center
---
config:
  look: handDrawn
---
%%{init: {'themeVariables': { 'fontSize': '32px', 'padding': '40px'}}}%%
flowchart
    
    / o--obin
    / o--odev
    / o--oetc
    / o--ohome
    home o--omy-username
    home o--omy-friend
    / o--otmp

    my-username o--o all_my_files
```

Each rectangle is a folder or **directory** (**dir** for short)

::: {.notes}
- This shows a sketch of a file system.
- We have a hierarchy of folders or directories sitting inside one another.
:::

## File system on Linux

```{mermaid}
%%| fig-align: center
---
config:
  look: handDrawn
---
%%{init: {'themeVariables': { 'fontSize': '32px', 'padding': '40px'}}}%%
flowchart
    
    / o--obin
    / o--odev
    / o--oetc
    / o--ohome
    home o--omy-username
    home o--omy-friend
    / o--otmp

    my-username o--o all_my_files

    style / fill:#f9f,stroke:#333,stroke-width:10px,color:#333
```

Each rectangle is a folder or **directory** (**dir** for short)

::: {.notes}
- This branching system starts from the root (the forward slash) at the very top
- Inside this root directory, we have a bunch of system folders - we don't need to worry about these now.
:::

## File system on Linux

```{mermaid}
%%| fig-align: center
---
config:
  look: handDrawn
---
%%{init: {'themeVariables': { 'fontSize': '32px', 'padding': '40px'}}}%%
flowchart
    
    / o--obin
    / o--odev
    / o--oetc
    / o--ohome
    home o--omy-username
    home o--omy-friend
    / o--otmp

    my-username o--o all_my_files

    style home fill:#f9f,stroke:#333,stroke-width:10px,color:#333
```

Each rectangle is a folder or **directory** (**dir** for short)

::: {.notes}
- One of the directories is called "home": ths contains all the home directories of users.
- The home directories are usually called after their owner's username.
- If you look in this directory on a personal or family computer, you might find a handful of user home directories
- If you look at this directory on a university HPC system, like Aire, you'll find hundreds of user home directories
:::

## File system on Linux

```{mermaid}
%%| fig-align: center
%%| fig-width: 100%
---
config:
  look: handDrawn
---
%%{init: {'themeVariables': { 'fontSize': '32px', 'padding': '40px'}}}%%
flowchart
    
    / o--obin
    / o--odev
    / o--oetc
    / o--ohome
    home o--omy-username
    home o--omy-friend
    / o--otmp

    my-username o--o all_my_files

    style my-username fill:#f9f,stroke:#333,stroke-width:10px,color:#333
```

The `my-username` folder is your **user home directory**

::: {.notes}
- Confusingly, we refer to this highlighted directory as your *home* directory
- Even though there is a folder one level up that is called home!
:::

## File system on Linux

```{mermaid}
%%| fig-align: center
%%| fig-width: 100%
---
config:
  look: handDrawn
---
%%{init: {'themeVariables': { 'fontSize': '32px', 'padding': '40px'}}}%%
flowchart
    
    / o--obin
    / o--odev
    / o--oetc
    / o--ohome
    home o--omy-username
    home o--omy-friend
    / o--otmp

    my-username o--o all_my_files

    style my-username fill:#f9f,stroke:#333,stroke-width:10px,color:#333
```

How do we describe the address of this home directory?

::: {.notes}
- How do we describe where this directory or folder is?
- We describe it in a similar way to a website URL, using it's path
- We need to know all the folders directly above it...
- You've already used folders and directories if you've ever saved a file from Word or Excel, or opened a pdf in your browser.
:::

## File system on Linux

```{mermaid}
%%| fig-align: center
%%| fig-width: 100%
---
config:
  look: handDrawn
---
%%{init: {'themeVariables': { 'fontSize': '32px', 'padding': '40px'}}}%%
flowchart
    
    / o--obin
    / o--odev
    / o--oetc
    / o--ohome
    home o--omy-username
    home o--omy-friend
    / o--otmp

    my-username o--o all_my_files

    style my-username fill:#f9f,stroke:#333,stroke-width:10px,color:#333
    style home fill:#f9f,stroke:#333,stroke-width:10px,color:#333
    style / fill:#f9f,stroke:#333,stroke-width:10px,color:#333
```

The folders in the address are `/`, `home` and `my-username`

::: {.notes}
- Above our username directory, we have home and the root (which is denoted by just a forward slash)
:::

## File system on Linux

```{mermaid}
%%| fig-align: center
%%| fig-width: 100%
---
config:
  look: handDrawn
---
%%{init: {'themeVariables': { 'fontSize': '32px', 'padding': '40px'}}}%%
flowchart
    
    / o--obin
    / o--odev
    / o--oetc
    / o--ohome
    home o--omy-username
    home o--omy-friend
    / o--otmp

    my-username o--o all_my_files

    style my-username fill:#f9f,stroke:#333,stroke-width:10px,color:#333
    style home fill:#f9f,stroke:#333,stroke-width:10px,color:#333
    style / fill:#f9f,stroke:#333,stroke-width:10px,color:#333
```

Stick them together like a URL: `/home/my-username`

::: {.notes}
- We just have to put them together like a web address (because the internet is basically just a giant file structure)
:::

## File system on Linux

On Windows, file paths use backlashes ( `\` ) instead of forward slashes (`/`)!

- This can cause confusion and errors if you are writing scripts that load in data from certain file paths, and need to use both Windows and Linux!
- Thankfully there are lots of ways around this, including libraries for handling paths in Python and R

::: {.notes}
- It's useful to note that Windows uses slashes in the opposite direction for file paths.
- We're not going to focus on this today as we are using only Linux
- But if you get an error while coding it's useful to keep this in mind.
:::

## File system on Linux

```{mermaid}
%%| fig-align: center
%%| fig-width: 100%
---
config:
  look: handDrawn
---
%%{init: {'themeVariables': { 'fontSize': '32px', 'padding': '40px'}}}%%
flowchart
    
    / o--obin
    / o--odev
    / o--oetc
    / o--ohome
    home o--omy-username
    home o--omy-friend
    / o--otmp

    my-username o--o all_my_files

    style my-username fill:#f9f,stroke:#333,stroke-width:10px,color:#333
    style home fill:#f9f,stroke:#333,stroke-width:10px,color:#333
    style / fill:#f9f,stroke:#333,stroke-width:10px,color:#333
```

Stick them together like a URL: `/home/my-username`

::: {.notes}
- Back to our file system.
- Today, everything we are doing will be in our home directory, so let's just focus on that!
- When you log in to a linux system, this is usually where you will be dropped!
:::

## File system on Linux

```{mermaid}
%%| fig-align: center
%%| fig-width: 100%
---
config:
  look: handDrawn
---
%%{init: {'themeVariables': { 'fontSize': '32px', 'padding': '40px'}}}%%
flowchart
    
    / o--ohome
    home o--omy-username

    my-username o--o all_my_files

    style my-username fill:#f9f,stroke:#333,stroke-width:10px,color:#333
    style home fill:#f9f,stroke:#333,stroke-width:10px,color:#333
    style / fill:#f9f,stroke:#333,stroke-width:10px,color:#333
```

`/home/my-username/all_my_files` is a bit long...

::: {.notes}
- Typing the full path to our files and folders is a bit tedious
- lets look at a shorter way
:::

## File system on Linux

::: {layout-ncol=2}
```{mermaid}
%%| fig-align: center
%%| fig-width: 100%
---
config:
  look: handDrawn
---
%%{init: {'themeVariables': { 'fontSize': '32px', 'padding': '40px'}}}%%
flowchart
    
    / o--ohome
    home o--omy-username

    my-username o--o all_my_files

    style my-username fill:#f9f,stroke:#333,stroke-width:10px,color:#333
    style home fill:#f9f,stroke:#333,stroke-width:10px,color:#333
    style / fill:#f9f,stroke:#333,stroke-width:10px,color:#333
```

```{mermaid}
%%| fig-align: center
%%| fig-width: 100%
---
config:
  look: handDrawn
---
%%{init: {'themeVariables': { 'fontSize': '32px', 'padding': '40px'}}}%%
flowchart
    
    home["~"] o--o all_my_files

    style home fill:#f9f,stroke:#333,stroke-width:10px,color:#333

```
:::

`/home/my-username/all_my_files` is a bit long...

::: {.notes}
- Typing the full path to our files and folders is a bit tedious
- lets look at a shorter way
:::

## File system on Linux

```{mermaid}
%%| fig-align: center
%%| fig-width: 100%
---
config:
  look: handDrawn
---
%%{init: {'themeVariables': { 'fontSize': '32px', 'padding': '40px'}}}%%
flowchart
    
    home["~"] o--o all_my_files

    style home fill:#f9f,stroke:#333,stroke-width:10px,color:#333
```


- To save us from typing out `/home/my-username` every time we refer to a directory or file, we can use the shortcut `~`, called a *tilde*
- This turns `/home/my-username/all_my_files` to `~/all_my_files`

## Let's explore some files!

Time to explore some files on a Linux system!

```{mermaid}
%%| fig-align: center
%%| fig-width: 100%
---
config:
  look: handDrawn
---
%%{init: {'themeVariables': { 'fontSize': '28px'}}}%%
flowchart TD
    A["/home/vscode/ <br> or ~"] o--o B[red-folder]
    A o--o C[pink-folder]
    A o--o D[blue-folder]

    B o--o r1([red-1.txt ])
    B o--o r2([red-2.txt ])
    B o--o r3([red-3.txt ])

    C o--o P1[pink-sub-folder]
    C o--o p2(["pink-file.md <br>"])
    C o--o p3{{"say_hi.sh <br>"}}

    P1 o--o p4(["**helloworld.py** <br>"])
    P1 o--o p5(["pink-data.csv <br>"])

    D o--o b1(["**blue.r** <br>"])

```

## Using our custom virtual machine {.smaller}

For this course, we've built a custom virtual machine for you to use.

This requires a **GitHub** account which you were asked to set up before this course.

(Don't worry if you haven't - please go and quickly sign up to [GitHub](https://github.com/signup) now!)

- There are many other ways to access the bash shell, such as on one of the HPC systems here at Leeds, or by installing [git bash](https://git-scm.com/downloads/win) on Windows, or using the terminal on Linux or Mac.
- We want everyone in the class to have the same directory structure and environment which is why we are using a virtual machine!

## Launch virtual machine

Insert instructions here

## Launch virtual machine

Insert instructions here

## The terminal

Once you've launched your virtual machine, you will see a terminal window something like this:

::: {style="font-size: 0.7em; text-align: left; background-color: black; color: white; font-family: monospace"}

[_ ]{style="color: black"}

[_ ]{style="color: black"}[\@username]{style="color: #00FF00"} **→** [/workspaces/bash-codespaces-template]{style="color: #00FFFF"} [(main)]{style="color: #FF7F50"} [$ ▮]{style="color: white"}

[_ ]{style="color: black"}
:::

:::::{.fragment .fade-in}



::: {style="font-size: 0.7em; text-align: left; background-color: black; color: white; font-family: monospace"}

[_ ]{style="color: black"}

[_ ]{style="color: black"}[\@username]{style="color: #00FF00"} **→** [<u>/workspaces/bash-codespaces-template</u>]{style="color: #00FFFF"} [(main)]{style="color: #FF7F50"} [$ ▮]{style="color: white"}

[_ ]{style="color: black"}
:::

The <u>underlined section</u> is your directory *path*.

:::::


## The terminal

Once you've launched your virtual machine, you will see a terminal window something like this:

::: {style="font-size: 0.7em; text-align: left; background-color: black; color: white; font-family: monospace"}

[_ ]{style="color: black"}

[_ ]{style="color: black"}[\@username]{style="color: #00FF00"} **→** [/workspaces/bash-codespaces-template]{style="color: #00FFFF"} [(main)]{style="color: #FF7F50"} [$ ▮]{style="color: white"}

[_ ]{style="color: black"}
:::

:::::{.fragment .fade-in}



::: {style="font-size: 0.7em; text-align: left; background-color: black; color: white; font-family: monospace"}

[_ ]{style="color: black"}

[_ ]{style="color: black"}[\@username]{style="color: #00FF00"} **→** [/workspaces/bash-codespaces-template]{style="color: #00FFFF"} [<u>(main)</u>]{style="color: #FF7F50"} [$ ▮]{style="color: white"}

[_ ]{style="color: black"}
:::

The <u>underlined section</u> has to do with the **git version control system**: not a topic for today, but you can learn about this in SWD2!

:::::

## The terminal

Once you've launched your virtual machine, you will see a terminal window something like this:

::: {style="font-size: 0.7em; text-align: left; background-color: black; color: white; font-family: monospace"}

[_ ]{style="color: black"}

[_ ]{style="color: black"}[\@username]{style="color: #00FF00"} **→** [/workspaces/bash-codespaces-template]{style="color: #00FFFF"} [(main)]{style="color: #FF7F50"} [$ ▮]{style="color: white"}

[_ ]{style="color: black"}
:::

:::::{.fragment .fade-in}

::: {style="font-size: 0.7em"}
The dollar symbol ($) and rectangle (▮) on the right hand side are the end of the prompt and the cursor.

- The $ tells you where the computer's message ends, and where you can enter your commands.
- The ▮ (which will probably be slowly flashing) tells you where the cursor is; this often looks more like a vertical line ( | ) in other programs like Word.
:::

:::::

## The terminal

If you click on the [▮]{style="color: white; background-color: black"} or the space just to the right of the [$]{style="color: white; background-color: black"} you can type in your message:

::: {style="font-size: 0.7em; text-align: left; background-color: black; color: white; font-family: monospace"}

[_ ]{style="color: black"}

[_ ]{style="color: black"}[\@username]{style="color: #00FF00"} **→** [/workspaces/bash-codespaces-template]{style="color: #00FFFF"} [(main)]{style="color: #FF7F50"} [$ hello▮]{style="color: white"}

[_ ]{style="color: black"}
:::


Anything you type will be in **white** text in the terminal; the cursor will blink at the end of the text.

To *send* the argument or message, you need to press ENTER on your keyboard.

## The terminal

If you click on the [▮]{style="color: white; background-color: black"} or the space just to the right of the [$]{style="color: white; background-color: black"} you can type in your message:

::: {style="font-size: 0.7em; text-align: left; background-color: black; color: white; font-family: monospace"}

[_ ]{style="color: black"}

[_ ]{style="color: black"}[\@username]{style="color: #00FF00"} **→** [/folders]{style="color: #00FFFF"} [(main)]{style="color: #FF7F50"} [$]{style="color: grey"} [**this is the code you type**]{style="color: white"} [↵]{style="color: #DDA0DD; font-size: 1.5em;"}

[_ ]{style="color: black"}
:::

- The code you need to type/copy and paste is shown in **bold** white
- We will hide the cursor and fade the prompt ($) to grey
- We will show an ENTER symbol in pink to remind you how to enter the command (↵)

## Very first command: `cd`

We're going to use the `cd` command to bring us to our home directory.

::::: {style="font-size: 1.2em; text-align: left; background-color: black; color: white; font-family: monospace"}
[_ ]{style="color: black"}

[_ ]{style="color: black"}[\@username]{style="color: #00FF00"} **→** [/folders]{style="color: #00FFFF"} [(main)]{style="color: #FF7F50"} [$]{style="color: grey"} [▮]{style="color: white"}

:::{.fragment .fade-in}
[_ ]{style="color: black"}[\@username]{style="color: #00FF00"} **→** [/folders]{style="color: #00FFFF"} [(main)]{style="color: #FF7F50"} [$]{style="color: grey"} [**cd**]{style="color: white"} [↵]{style="color: #DDA0DD; font-size: 1.5em;"}
:::

:::{.fragment .fade-in}
[_ ]{style="color: black"}[\@username]{style="color: #00FF00"} **→** [~]{style="color: #00FFFF"} [$]{style="color: grey"} [▮]{style="color: white"}
:::

[_ ]{style="color: black"}
:::::

## Very first command: `cd`

- `cd` stands for *change directory*
- It brings us back to our *home directory*, `~` or `/home/vscode`

:::{.fragment .fade-in}
- Our virtual machine is a little bit weird because it starts us off in a different folder: on most Linux systems, when you log in, you will immediately be in your home directory
:::

::::: {style="font-size: 1.2em; text-align: left; background-color: black; color: white; font-family: monospace"}
[_ ]{style="color: black"}[\@username]{style="color: #00FF00"} **→** [~]{style="color: #00FFFF"} [$]{style="color: grey"} [▮]{style="color: white"}
:::::

## What's in this folder?

Now that you know how to find home (from wherever in the file system you are), you need to know what's *in* your home directory.

- You can *list* out the files and folders in your directory with the command `ls`

## What's in this folder? `ls` to list

Using the `ls` command to list out the contents of the directory:

::::: {style="font-size: 1.2em; text-align: left; background-color: black; color: white; font-family: monospace"}
[_ ]{style="color: black"}

[_ ]{style="color: black"}[\@username]{style="color: #00FF00"} **→** [~]{style="color: #00FFFF"} [$]{style="color: grey"} [▮]{style="color: white"}

:::{.fragment .fade-in}
[_ ]{style="color: black"}[\@username]{style="color: #00FF00"} **→** [~]{style="color: #00FFFF"} [$]{style="color: grey"} [**ls**]{style="color: white"} [↵]{style="color: #DDA0DD; font-size: 1.5em;"}
:::

:::{.fragment .fade-in}
[_ ]{style="color: black"}[blue-folder    pink-folder    red-folder]{style="color: #00FFFF"}

[_ ]{style="color: black"}[\@username]{style="color: #00FF00"} **→** [~]{style="color: #00FFFF"} [$]{style="color: grey"} [▮]{style="color: white"}
:::

[_ ]{style="color: black"}
:::::

## What's in this folder? `ls` to list

How do we know if `blue-folder` is a file or a directory? (imagine it has a less descriptive name)

::::: {style="font-size: 1.2em; text-align: left; background-color: black; color: white; font-family: monospace"}

[_ ]{style="color: black"}[\@username]{style="color: #00FF00"} **→** [~]{style="color: #00FFFF"} [$]{style="color: grey"} [**ls**]{style="color: white"} [↵]{style="color: #DDA0DD; font-size: 1.5em;"}

[_ ]{style="color: black"}[blue-folder    pink-folder    red-folder]{style="color: #00FFFF"}

[_ ]{style="color: black"}[\@username]{style="color: #00FF00"} **→** [~]{style="color: #00FFFF"} [$]{style="color: grey"} [▮]{style="color: white"}

:::{.fragment .fade-in}
[_ ]{style="color: black"}[\@username]{style="color: #00FF00"} **→** [~]{style="color: #00FFFF"} [$]{style="color: grey"} [**ls -F**]{style="color: white"} [↵]{style="color: #DDA0DD; font-size: 1.5em;"}
:::

:::::

## What's in this folder? `ls` to list

We can use `ls -F`: this tells us the category of the "things" in the directory

- If the name ends in a trailing forward slash (like `this/`) then the item is a directory or folder

::::: {style="font-size: 1.2em; text-align: left; background-color: black; color: white; font-family: monospace"}

[_ ]{style="color: black"}[\@username]{style="color: #00FF00"} **→** [~]{style="color: #00FFFF"} [$]{style="color: grey"} [**ls -F**]{style="color: white"} [↵]{style="color: #DDA0DD; font-size: 1.5em;"}

[_ ]{style="color: black"}[blue-folder/    pink-folder/    red-folder/]{style="color: #00FFFF"}

[_ ]{style="color: black"}[\@username]{style="color: #00FF00"} **→** [~]{style="color: #00FFFF"} [$]{style="color: grey"} [▮]{style="color: white"}


:::::

## What's in this folder? `ls` to list

This is what we expected: we saw in our directory map that we have three directories in our home (`~`): `red-folder`, `pink-folder`, and `blue-folder`.

```{mermaid}
%%| fig-align: center
%%| fig-width: 100%
---
config:
  look: handDrawn
---
%%{init: {'themeVariables': { 'fontSize': '28px'}}}%%
flowchart TD
    A["/home/vscode/ <br> or ~"] o--o B[red-folder]
    A o--o C[pink-folder]
    A o--o D[blue-folder]

    B o--o r1([red-1.txt ])
    B o--o r2([red-2.txt ])
    B o--o r3([red-3.txt ])

    C o--o P1[pink-sub-folder]
    C o--o p2(["pink-file.md <br>"])
    C o--o p3{{"say_hi.sh <br>"}}

    P1 o--o p4(["**helloworld.py** <br>"])
    P1 o--o p5(["pink-data.csv <br>"])

    D o--o b1(["**blue.r** <br>"])

```

## What's in this folder? `ls` to list

Let's list what's inside `pink-folder`...

```{mermaid}
%%| fig-align: center
%%| fig-width: 100%
---
config:
  look: handDrawn
---
%%{init: {'themeVariables': { 'fontSize': '28px'}}}%%
flowchart TD
    A["/home/vscode/ <br> or ~"] o--o B[red-folder]
    A o--o C[pink-folder]
    A o--o D[blue-folder]

    B o--o r1([red-1.txt ])
    B o--o r2([red-2.txt ])
    B o--o r3([red-3.txt ])

    C o--o P1[pink-sub-folder]
    C o--o p2(["pink-file.md <br>"])
    C o--o p3{{"say_hi.sh <br>"}}

    P1 o--o p4(["**helloworld.py** <br>"])
    P1 o--o p5(["pink-data.csv <br>"])

    D o--o b1(["**blue.r** <br>"])

```

## What's in this folder? `ls` to list

We can use `ls name-of-folder` to tell us what's in a sub-directory.

What will the output be?

::::: {style="font-size: 1.2em; text-align: left; background-color: black; color: white; font-family: monospace"}

[_ ]{style="color: black"}[\@username]{style="color: #00FF00"} **→** [~]{style="color: #00FFFF"} [$]{style="color: grey"} [**ls pink-folder**]{style="color: white"} [↵]{style="color: #DDA0DD; font-size: 1.5em;"}

:::{.fragment .fade-in}
[_ ]{style="color: black"}[pink-file.md ]{style="color: white"} [  pink-subfolder  ]{style="color: #00FFFF"} [  say_hi.sh  ]{style="color: #00FF00"}
:::

:::::

## What's in this folder? `ls` to list

We can use `ls -F name-of-folder` to tell us what's in a sub-directory and what category the items are.

What will the output be?

::::: {style="font-size: 1.0em; text-align: left; background-color: black; color: white; font-family: monospace"}

[_ ]{style="color: black"}[\@username]{style="color: #00FF00"} **→** [~]{style="color: #00FFFF"} [$]{style="color: grey"} [**ls -F pink-folder**]{style="color: white"} [↵]{style="color: #DDA0DD; font-size: 1.5em;"}

:::{.fragment .fade-in}
[_ ]{style="color: black"}[pink-file.md ]{style="color: white"} [  pink-subfolder/  ]{style="color: #00FFFF"} [  say_hi.sh*  ]{style="color: #00FF00"}
:::

:::::

:::{.fragment .fade-in}
- Files get no added symbols;
- Folders or directories get a trailing forward slash (`/`);
- *Executables* get an asterisk (`*`);
:::

## Recap

So far, we've used:

- `cd` on it's own to go to our home directory;
- `ls` on it's own to list out the contents of our current directory (our home);
- `ls -F` (`ls` with the *flag or option* `-F`) to list out the categories of the content in the directory;
- `ls dir-name` (`ls` with the *argument* `dir-name`) to list out the content of the sub-directory `dir-name`;

## Format of bash commands

You've already cracked how bash works with these few commands!

::::: {style="font-size: 1.7em; text-align: left; background-color: black; color: white; font-family: monospace"}

[_ ]{style="color: black"}[$]{style="color: white"} [ls]{style="color: #00FFFF"} [-F]{style="color: #00FF00"} [dir-name]{style="color: #DDA0DD;"}

:::: {style="font-size: 0.7em;"}
:::{.fragment .fade-in}

- [$ → prompt]{style="color: white;"}
- [ls → command]{style="color: #00FFFF;"}
- [-F → option]{style="color: #00FF00;"}
- [dir-name → argument]{style="color: #DDA0DD;"}

:::
::::

:::::

## Adding arguments to `cd`

We've used `cd` on it's own to access our home directory - what happens when we give it an argument?

What will the output be?

::::: {style="font-size: 1.2em; text-align: left; background-color: black; color: white; font-family: monospace"}

[_ ]{style="color: black"}[\@username]{style="color: #00FF00"} **→** [~]{style="color: #00FFFF"} [$]{style="color: grey"} [**cd pink-folder**]{style="color: white"} [↵]{style="color: #DDA0DD; font-size: 1.5em;"}

:::{.fragment .fade-in}

[_ ]{style="color: black"}[\@username]{style="color: #00FF00"} **→** [~/pink-folder]{style="color: #00FFFF"} [$]{style="color: grey"} [▮]{style="color: white"}
:::

:::::

:::{.fragment .fade-in}
We've moved *down* our directory structure, into the directory `pink-folder`
:::

## Explore with `cd` and `ls`

- Remember, you can return to home from anywhere with `cd` and no options or arguments
- Use `ls` to find out what is in the different directories
- Use `cd name-of-dir` to move to a subdirectory
- Use the [directory map](#map) if lost
- Use the `clear` command to clean up your terminal screen if it's getting too messy:


::::: {style="font-size: 1.2em; text-align: left; background-color: black; color: white; font-family: monospace"}

[_ ]{style="color: black"}[\@username]{style="color: #00FF00"} **→** [~]{style="color: #00FFFF"} [$]{style="color: grey"} [**clear**]{style="color: white"} [↵]{style="color: #DDA0DD; font-size: 1.5em;"}

:::::

## Getting help

There are two different ways of getting information about commands and their options and arguments within the shell:

- `man arg`
- `arg --help`

On our virtual machine, we are going to use the section option, `arg --help`. Try running `ls --help`:

::::: {style="font-size: 1.2em; text-align: left; background-color: black; color: white; font-family: monospace"}

[_ ]{style="color: black"}[\@username]{style="color: #00FF00"} **→** [~]{style="color: #00FFFF"} [$]{style="color: grey"} [**ls --help**]{style="color: white"} [↵]{style="color: #DDA0DD; font-size: 1.5em;"}

:::::

## Getting help

You'll be faced with a wall of text and will have to scroll to find the top of it:

::::: {style="font-size: 0.7em; text-align: left; background-color: black; color: white; font-family: monospace"}

[_ ]{style="color: black"}[\@username]{style="color: #00FF00"} **→** [~]{style="color: #00FFFF"} [$]{style="color: grey"} [**ls --help**]{style="color: white"} [↵]{style="color: #DDA0DD; font-size: 1.5em;"}

Usage: ls [OPTION]... [FILE]...

List information about the FILEs (the current directory by default).

Sort entries alphabetically if none of -cftuvSUX nor --sort is specified.


Mandatory arguments to long options are mandatory for short options too.

  -a, --all :                 do not ignore entries starting with .

  -A, --almost-all :          do not list implied . and ..

[and on, and on, and on...]{style="color: #DDA0DD; font-size: 1.5em;"}
:::::

## Getting help {.smaller}

This can be really useful for quickly checking the arguments and options to commands you half-remember,
but can also be incredibly unhelpful and overwhelming if you don't know what you're looking at!

- *Searching online is your friend!*
- If you know the argument name, say `ls`, wrap it in quotation marks in your search to require it;
- Search the term alongside terms like *bash*, *linux*, *command line*, *explanation*;
- For example, I might search **"ls -F" explanation**
- Stack Overflow and Stack Exchange (Q&A forums) can be useful sources, usually with a bit of conversation back and forth and likely some disagreement/argument about the *best* way of doing something.

## Getting help

- What does the command `ls -a` do?
  - Can you find an answer with `ls --help`?
  - What happens if you run `ls -a` inside `pink-folder`?
  - Can you find an answer by searching online?

::::: {style="font-size: 1em; text-align: left; background-color: black; color: white; font-family: monospace"}

[_ ]{style="color: black"}[\@username]{style="color: #00FF00"} **→** [~/somewhere]{style="color: #00FFFF"} [$]{style="color: grey"} [**cd**]{style="color: white"} [↵]{style="color: #DDA0DD; font-size: 1.5em;"} [go back to home]{style="color: grey; font-size: 0.8em;"}

[_ ]{style="color: black"}[\@username]{style="color: #00FF00"} **→** [~]{style="color: #00FFFF"} [$]{style="color: grey"} [**cd pink-folder**]{style="color: white"} [↵]{style="color: #DDA0DD; font-size: 1.5em;"}  [go to folder]{style="color: grey; font-size: 0.8em;"}

[_ ]{style="color: black"}[\@username]{style="color: #00FF00"} **→** [~/pink-folder]{style="color: #00FFFF"} [$]{style="color: grey"} [**ls -a**]{style="color: white"} [↵]{style="color: #DDA0DD; font-size: 1.5em;"} [???]{style="color: grey; font-size: 0.8em;"}

:::::

## `ls -a` {.smaller}

::::: {style="font-size: 0.7em; text-align: left; background-color: black; color: white; font-family: monospace"}

[_ ]{style="color: black"}[\@username]{style="color: #00FF00"} **→** [~/pink-folder]{style="color: #00FFFF"} [$]{style="color: grey"} [**ls -a**]{style="color: white"} [↵]{style="color: #DDA0DD; font-size: 1.5em;"}

:::{.fragment .fade-in}
[_ ]{style="color: black"} [ .  ..]{style="color: #00FFFF"} [pink-file.md ]{style="color: white"} [  pink-subfolder  ]{style="color: #00FFFF"} [  say_hi.sh  ]{style="color: #00FF00"} [.super-secret-hidden-file]{style="color: white"}  [.super-secret-hidden-folder]{style="color: #00FFFF"} 
:::

:::{.fragment .fade-in}
[_ ]{style="color: black"}[\@username]{style="color: #00FF00"} **→** [~/pink-folder]{style="color: #00FFFF"} [$]{style="color: grey"} [**ls -F -a**]{style="color: white"} [↵]{style="color: #DDA0DD; font-size: 1.5em;"}

:::

:::{.fragment .fade-in}
[_ ]{style="color: black"} [ ./  ../]{style="color: #00FFFF"} [pink-file.md ]{style="color: white"} [  pink-subfolder/  ]{style="color: #00FFFF"} [  say_hi.sh*  ]{style="color: #00FF00"} [.super-secret-hidden-file]{style="color: white"}  [.super-secret-hidden-folder/]{style="color: #00FFFF"} 
:::

:::::

:::{.fragment .fade-in}
What's in these weird directories `.` and `..`?

- Try exploring them with `ls .` and `ls ..`
- Try going to them using `cd .` and `cd ..`
- You can use the command `pwd` (path to the working directory) to print out exactly where you are (using `/home/vscode` instead of `~`)
:::

## `ls -a` {.smaller}

> What's in these weird directories `.` and `..`?
> 
> - Try exploring them with `ls .` and `ls ..`
> - Try going to them using `cd .` and `cd ..`
> - You can use the command `pwd` (path to the working directory) to print out exactly where you are (using `/home/vscode` instead of `~`)


- The single dot `.` stands for the current directory - the place you get when you use `pwd`
- The double dot `..` stands for the directory above the current directory.
- If you are currently in `~/pink-folder/pink-subfolder`:
  - The single dot `.` is the folder `~/pink-folder/pink-subfolder`
  - The double dot `..` is the folder `~/pink-folder`


## Relative paths

So far, we've looked at *absolute paths* that start up at `~` or `/home/vscode`.

```{mermaid}
%%| fig-align: center
%%| fig-width: 100%
---
config:
  look: handDrawn
---
%%{init: {'themeVariables': { 'fontSize': '28px'}}}%%
flowchart TD
    A["/home/vscode/ <br> or ~"] o--o B[red-folder]
    A o--o C[pink-folder]
    A o--o D[blue-folder]

    B o--o r1([red-1.txt ])
    B o--o r2([red-2.txt ])
    B o--o r3([red-3.txt ])

    C o--o P1[pink-sub-folder]
    C o--o p2(["pink-file.md <br>"])
    C o--o p3{{"say_hi.sh <br>"}}

    P1 o--o p4(["**helloworld.py** <br>"])
    P1 o--o p5(["pink-data.csv <br>"])

    D o--o b1(["**blue.r** <br>"])

```

## Relative paths

So far, we've looked at *absolute paths* that start up at `~` or `/home/vscode`.

```{mermaid}
%%| fig-align: center
%%| fig-width: 100%
---
config:
  look: handDrawn
---
%%{init: {'themeVariables': { 'fontSize': '28px'}}}%%
flowchart TD
    A["/home/vscode/ <br> or ~"] o--o B[red-folder]
    A o--o C[pink-folder]
    A o--o D[blue-folder]

    B o--o r1([red-1.txt ])
    B o--o r2([red-2.txt ])
    B o--o r3([red-3.txt ])

    C o--o P1[pink-sub-folder]
    C o--o p2(["pink-file.md <br>"])
    C o--o p3{{"say_hi.sh <br>"}}

    P1 o--o p4(["**helloworld.py** <br>"])
    P1 o--o p5(["pink-data.csv <br>"])

    D o--o b1(["**blue.r** <br>"])

    style A fill:#f9f,stroke:#333,stroke-width:10px,color:#333
    style C fill:#f9f,stroke:#333,stroke-width:10px,color:#333
    style P1 fill:#f9f,stroke:#333,stroke-width:10px,color:#333
    style p4 fill:#f9f,stroke:#333,stroke-width:10px,color:#333

```

`~/pink-folder/pink-sub-folder/helloworld.py`

## Relative paths

But if we are already in `pink-folder` (if it's our *working directory*), we can use a relative path:

```{mermaid}
%%| fig-align: center
%%| fig-width: 100%
---
config:
  look: handDrawn
---
%%{init: {'themeVariables': { 'fontSize': '28px'}}}%%
flowchart TD
    A["/home/vscode/ <br> or ~"] o--o B[red-folder]
    A o--o C[pink-folder]
    A o--o D[blue-folder]

    B o--o r1([red-1.txt ])
    B o--o r2([red-2.txt ])
    B o--o r3([red-3.txt ])

    C o--o P1[pink-sub-folder]
    C o--o p2(["pink-file.md <br>"])
    C o--o p3{{"say_hi.sh <br>"}}

    P1 o--o p4(["**helloworld.py** <br>"])
    P1 o--o p5(["pink-data.csv <br>"])

    D o--o b1(["**blue.r** <br>"])

    style C fill:#f9f,stroke:#333,stroke-width:10px,color:#333
    style P1 fill:#f9f,stroke:#333,stroke-width:10px,color:#333
    style p4 fill:#f9f,stroke:#333,stroke-width:10px,color:#333

```

`pink-sub-folder/helloworld.py`

## Relative paths

But if we are already in `pink-subfolder` (if it's our *working directory*), we can use a relative path:

```{mermaid}
%%| fig-align: center
%%| fig-width: 100%
---
config:
  look: handDrawn
---
%%{init: {'themeVariables': { 'fontSize': '28px'}}}%%
flowchart TD
    A["/home/vscode/ <br> or ~"] o--o B[red-folder]
    A o--o C[pink-folder]
    A o--o D[blue-folder]

    B o--o r1([red-1.txt ])
    B o--o r2([red-2.txt ])
    B o--o r3([red-3.txt ])

    C o--o P1[pink-sub-folder]
    C o--o p2(["pink-file.md <br>"])
    C o--o p3{{"say_hi.sh <br>"}}

    P1 o--o p4(["**helloworld.py** <br>"])
    P1 o--o p5(["pink-data.csv <br>"])

    D o--o b1(["**blue.r** <br>"])

    style P1 fill:#f9f,stroke:#333,stroke-width:10px,color:#333
    style p4 fill:#f9f,stroke:#333,stroke-width:10px,color:#333

```

`helloworld.py`

## Relative paths

What if we are in `pink-subfolder` (if it's our *working directory*), and want the path to `pink-file.md`?

```{mermaid}
%%| fig-align: center
%%| fig-width: 100%
---
config:
  look: handDrawn
---
%%{init: {'themeVariables': { 'fontSize': '28px'}}}%%
flowchart TD
    A["/home/vscode/ <br> or ~"] o--o B[red-folder]
    A o--o C[pink-folder]
    A o--o D[blue-folder]

    B o--o r1([red-1.txt ])
    B o--o r2([red-2.txt ])
    B o--o r3([red-3.txt ])

    C o--o P1[pink-sub-folder]
    C o--o p2(["pink-file.md <br>"])
    C o--o p3{{"say_hi.sh <br>"}}

    P1 o--o p4(["**helloworld.py** <br>"])
    P1 o--o p5(["pink-data.csv <br>"])

    D o--o b1(["**blue.r** <br>"])

    style P1 fill:#f9f,stroke:#333,stroke-width:10px,color:#333
    style p2 fill:#ff0,stroke:#333,stroke-width:10px,color:#333

```

Hint: what can we see with `ls .. ` from the current directory?

## Relative paths

`../pink-file.md`

```{mermaid}
%%| fig-align: center
%%| fig-width: 100%
---
config:
  look: handDrawn
---
%%{init: {'themeVariables': { 'fontSize': '28px'}}}%%
flowchart TD
    A["/home/vscode/ <br> or ~"] o--o B[red-folder]
    A o--o C[pink-folder]
    A o--o D[blue-folder]

    B o--o r1([red-1.txt ])
    B o--o r2([red-2.txt ])
    B o--o r3([red-3.txt ])

    C o--o P1[pink-sub-folder]
    C o--o p2(["pink-file.md <br>"])
    C o--o p3{{"say_hi.sh <br>"}}

    P1 o--o p4(["**helloworld.py** <br>"])
    P1 o--o p5(["pink-data.csv <br>"])

    D o--o b1(["**blue.r** <br>"])

    style P1 fill:#f9f,stroke:#333,stroke-width:10px,color:#333
    style p2 fill:#ff0,stroke:#333,stroke-width:10px,color:#333

```

We can use the command `cat` with a path to a file to read out the contents: try `cat ../pink-file.md`

## Recap

We've covered an awful lot of commands now!

- If at any point in the course you need a refresher, just click the link at the bottom of the screen to the **Cheat Sheet**
which lists useful commands.

## Making files and directories

- You can create a directory with the command `mkdir`, and the name of the new directory as an argument:
  - `mkdir new-dir-name`
- You ca create files with the command `touch`, and the name of the new file as an argument:
 - `touch new-file-name.txt`
- You can provide a path (absolute or relative) instead of a name if you want to create the folder or file somewhere other that the current working directory.

## Rules for file and directory names {.smaller}

1. Don't use spaces in names; Linux will think you are entering two separate arguments to a command.
  - Break up words with hyphens or underscores instead `like_this` `or-this`!
2. Don't begin a name with a hyphen/dash (so no files called `-this`); Linux will think this is a flag/option to a command.
3. Stick with numbers, letters, full stops, dashes/hyphens and underscores.
  - Special characters like $, %, &, *, / etc. have special meanings on the command line and can lead to confusion!

If you're working with old files/directories that have spaces in their names, you'll need to wrap the path in single quotation marks, `'like this.txt'`

## Directory map {.smaller .scrollable #map}

Use the back button in your browser to return to the slide you were previously on.
```{mermaid}
flowchart TD
    START:::hidden --> |cd|A
    A[/home/vscode/] -->|cd red-folder| B[red-folder/ ]
    A[/home/vscode/] -->|cd pink-folder| C[pink-folder/ ]
    A[/home/vscode/] -->|cd blue-folder| D[blue-folder/ ]

    B --- r1([red-1.txt ])
    B --- r2([red-2.txt ])
    B --- r3([red-3.txt ])

    C --- |cd pink-sub-folder|P1[pink-sub-folder/ ]
    C --- p2([pink-file.md ])
    C --- |./say_hi.sh|p3{{say_hi.sh }}

    P1 --- |python helloworld.py|p4([**helloworld.py** ])
    P1 --- p5([pink-data.csv ])

    D --- |Rscript blue.r|b1([**blue.r** ])

```

Scroll down to see key:

```{mermaid}
flowchart TD
  E[folder] -->|CLI argument|F([file])
  E[folder] -->|CLI argument|G{{executable}}
```

You can use `cat filename` to print out the content of a file, or `nano filename` to open the nano text editor.
You can also use `code filename` to open it in vscode on your virtual machine.

On the HPC system, you'll likely use `nano` to edit code if you ever need to.


## Cheat Sheet {.smaller .scrollable #cheat-sheet background-color="#f5e0fd"}

Use the back button in your browser to return to the slide you were previously on.

**If you are lost, you can always `cd` home!**

| Command | Description |
| :--- | :--- |
| `cd` | Change directory to home |
| `cd dir-name` | Change directory to `dir-name` |
| `pwd` | Print the current working directory - where am I? |
| `name --help` | Load the manual for `name` - on Codespaces |
| `man name` | Load the manual for `name` - on Aire/ARC |
| `ls` | List the contents of a directory |
| `cat` | Print out the contents of a file |
| `mkdir` | Make a new directory |

Some more `cd` commands:

| Command | Description |
| :--- | :--- |
| `cd ..` | Go up a level to the parent directory |
| `cd -` | Go back to the previous directory |
| `cd ~/dir-name` | Go to `dir-name`, a directory in the home directory |

Some more `ls` commands:

| Command | Description |
| :--- | :--- |
| `ls -F` | List the contents of a dir, with symbols for content type |
| `ls -a` | List *all* contents, including hidden files and directories |

::: footer
<!-- Remove footer from this page -->
:::