## Virtual Environments {.smaller}

If application A needs version 1.0 of a particular module but application B
needs version 2.0, then the requirements are in conflict and installing either
version 1.0 or 2.0 will leave one application unable to run.

The solution for this problem is to create a virtual environment, a
self-contained directory tree that contains installation for particular versions
of software/packages.

### Conda

- [Conda](https://docs.conda.io/en/latest/) is an open source package management
system and environment management system that runs on Windows, macOS, and Linux.
- It offers dependency and environment management for any language—Python, R, 
Ruby, Lua, Scala, Java, JavaScript, C/ C++, Fortran, and more.
- Easy user install via [Anaconda](https://www.anaconda.com/download).


## Code formatting

```python
# myscript.py:
x = {  'a':37,'b':42,
'c':927}
y = 'hello '+       'world'
class foo  (     object  ):
   def f    (self   ):
       return       y **2
   def g(self, x :int,
       y : int=42
       ) -> int:
       return x--y
def f  (   a ) :
   return      37+-a[42-a :  y*3]
```

## Coding conventions {.smaller}

If your language or project has a standard policy, use that. For example:

- Python: [PEP8](https://www.python.org/dev/peps/pep-0008/)
- R: [Google's guide for R](https://google.github.io/styleguide/Rguide.xml), [tidyverse style guide](https://style.tidyverse.org/)
- C++: [Google's style guide](https://google.github.io/styleguide/cppguide.html)
- Julia: [Official style guide](https://docs.julialang.org/en/v1/manual/style-guide/index.html)

## Linters

Linters are automated tools which enforce coding conventions and check for 
common mistakes. For example:

- Python:
  - [flake8](https://flake8.pycqa.org/en/latest/index.html) (flags any syntax/style errors)
  - [black](https://black.readthedocs.io/) (enforces the style)
  - [isort](https://pycqa.github.io/isort/) ("Sorts" imports alphabetically in groups)

## Example: Flake8 Linter

```bash
$ conda install flake8
$ flake8 myscript.py
myscript.py:2:6: E201 whitespace after '{'
myscript.py:2:11: E231 missing whitespace after ':'
myscript.py:2:14: E231 missing whitespace after ','
myscript.py:2:18: E231 missing whitespace after ':'
myscript.py:3:1: E128 continuation line under-indented for visual indent
myscript.py:3:4: E231 missing whitespace after ':'
myscript.py:4:13: E225 missing whitespace around operator
myscript.py:4:14: E222 multiple spaces after operator
myscript.py:5:1: E302 expected 2 blank lines, found 0
myscript.py:5:13: E201 whitespace after '('
myscript.py:5:25: E202 whitespace before ')'
myscript.py:6:4: E111 indentation is not a multiple of 4
myscript.py:6:9: E211 whitespace before '('
myscript.py:6:20: E202 whitespace before ')'
myscript.py:7:8: E111 indentation is not a multiple of 4
myscript.py:7:14: E271 multiple spaces after keyword
myscript.py:7:25: E225 missing whitespace around operator
myscript.py:8:4: E301 expected 1 blank line, found 0
myscript.py:8:4: E111 indentation is not a multiple of 4
myscript.py:8:17: E203 whitespace before ':'
myscript.py:8:18: E231 missing whitespace after ':'
myscript.py:9:8: E128 continuation line under-indented for visual indent
myscript.py:9:9: E203 whitespace before ':'
myscript.py:9:15: E252 missing whitespace around parameter equals
myscript.py:9:16: E252 missing whitespace around parameter equals
myscript.py:10:8: E124 closing bracket does not match visual indentation
myscript.py:10:8: E125 continuation line with same indent as next logical line
myscript.py:11:8: E111 indentation is not a multiple of 4
myscript.py:12:1: E302 expected 2 blank lines, found 0
myscript.py:12:6: E211 whitespace before '('
myscript.py:12:9: E201 whitespace after '('
myscript.py:12:13: E202 whitespace before ')'
myscript.py:12:15: E203 whitespace before ':'
myscript.py:13:4: E111 indentation is not a multiple of 4
myscript.py:13:10: E271 multiple spaces after keyword
myscript.py:13:26: E203 whitespace before ':'
myscript.py:13:34: W291 trailing whitespace
```

## Example: Black Code Formatter {.smaller}

:::{.par_botton}
Install  and run Black
:::
```bash
$ conda install black
$ black myscript.py
```

:::{.par_botton}
Check the file!
:::
```python
# myscript.py:
x = {"a": 37, "b": 42, "c": 927}
y = "hello " + "world"


class foo(object):
    def f(self):
        return y**2

    def g(self, x: int, y: int = 42) -> int:
        return x - -y


def f(a):
    return 37 + -a[42 - a : y * 3]
```

## IDE {.smaller}

Using an Integrated development environment (IDE) will certainly save you time, but the advantages of using an IDE go beyond that. Below are some IDE advantages

1. Syntax highlighting
2. Text autocompletion
3. Refactoring options
4. Easily Importing libraries
5. Build, compile, or run

### Visual Studio Code

To install VS Code follow the instructions [here](https://code.visualstudio.com/).

## VSC Example: automatically using black {.smaller}

**Configure VSC to use Black**: Code (or File) > Preferences > Settings

- Search for `python formatting provider` and choose `black`
- Search for `format on save` and check the box to enable

**Select interpreter**: View > `Command Palette..` (or `Ctrl+Shift+P`)

- Search for `Python: Select Interpreter`
- Choose the correct environment

Now the Black package is going to fix your codes layout every time you save a
code file.

## Version Control {.smaller}

![[Piled Higher and Deeper by Jorge Cham](http://www.phdcomics.com)](./assets/img/git/phd101212s.png)

## Test-driven development {.smaller}

**Example**, suppose we need to find the result of a number divided by another number:

::: {.panel-tabset}

### Naive solution

- Write a function a_div_b.
- Call it interactively on two or three different inputs.
- If it produces the wrong answer, fix the function and re-run that test.

This clearly works — after all, thousands of scientists are doing it right now — but there’s a better way

### TDD solution

- Write a short function for each test.
- Write a `a_div_b` function that should pass those tests.
- If `a_div_b` produces any wrong answers, fix it and re-run the test functions.

Writing the tests before writing the function they exercise is called **test-driven development (TDD)**.
Its advocates believe it produces better code faster because:

- If people write tests after writing the thing to be tested, they are subject to confirmation bias, i.e., they subconsciously write tests to show that their code is correct, rather than to find errors.
- Writing tests helps programmers figure out what the function is actually supposed to do.

:::

## Possible tests: `a_div_b` example {.smaller}

Let's think in all possible scenarios for this problem and how we could test them.

::: {.panel-tabset}

### Bigger by smaller

- Using `4` and `2`, the answer should be `2`.

```python
assert a_div_b(4, 2) == 2
```

- Or... the answer should be `larger` than `1`.

```python
assert a_div_b(8, 7) > 1
```

### Smaller by bigger

- Using `2` and `4`, the answer should be `0.5`.

```python
assert a_div_b(2, 4) == 0.5
```

- Or... the answer should be `smaller` than `1`.

```python
assert a_div_b(7, 8) < 1
```

### Negative numbers

- Using `-4` and `-2`, the answer should be `2`.

```python
assert a_div_b(-4, -2) == 2
```

- Or... the answer should be `positive`.

```python
assert a_div_b(-4, -2) > 0
```

:::
