## Virtual Environments {.smaller}

If application A needs version 1.0 of a particular module but application B
needs version 2.0, then the requirements are in conflict and installing either
version 1.0 or 2.0 will leave one application unable to run.

The solution for this problem is to create a virtual environment, a
self-contained directory tree that contains installation for particular versions
of software/packages.

### Conda

- [Conda](https://docs.conda.io/en/latest/) is an open source package management
system and environment management system that runs on Windows, macOS, and Linux.
- It offers dependency and environment management for any language—Python, R, 
Ruby, Lua, Scala, Java, JavaScript, C/ C++, Fortran, and more.
- Easy user install via [Anaconda](https://www.anaconda.com/download).


## Code formatting

```python
# myscript.py:
x = {  'a':37,'b':42,
'c':927}
y = 'hello '+       'world'
class foo  (     object  ):
   def f    (self   ):
       return       y **2
   def g(self, x :int,
       y : int=42
       ) -> int:
       return x--y
def f  (   a ) :
   return      37+-a[42-a :  y*3]
```

## Coding conventions {.smaller}

If your language or project has a standard policy, use that. For example:

- Python: [PEP8](https://www.python.org/dev/peps/pep-0008/)
- R: [Google's guide for R](https://google.github.io/styleguide/Rguide.xml), [tidyverse style guide](https://style.tidyverse.org/)
- C++: [Google's style guide](https://google.github.io/styleguide/cppguide.html)
- Julia: [Official style guide](https://docs.julialang.org/en/v1/manual/style-guide/index.html)

## Example: Python Naming  {.smaller}

- Python conventions are governed largely by a set of documents called Python Enhancement Proposals (PEP). You can see more about PEP index in the official [Python website](https://www.python.org/dev/peps/).
- The PEP related with python coding style is the [PEP8 – Style Guide for Python Code](https://www.python.org/dev/peps/pep-0008/).
- This file has guidance for all layout related aspects. For instance we are interested in the [Package and Module Names](https://www.python.org/dev/peps/pep-0008/#package-and-module-names) section:

> Modules should have short, all-lowercase names. Underscores can be used in the module name if it improves readability. Python packages should also have short, all-lowercase names, although the use of underscores is discouraged.

## Linters

Linters are automated tools which enforce coding conventions and check for 
common mistakes. For example:

- Python:
  - [flake8](https://flake8.pycqa.org/en/latest/index.html) (flags any syntax/style errors)
  - [black](https://black.readthedocs.io/) (enforces the style)
  - [isort](https://pycqa.github.io/isort/) ("Sorts" imports alphabetically in groups)

## Example: Black Code Formatter

:::{.par_botton}
Install  and run Black
:::
```bash
$ conda install black
$ black myscript.py
```

:::{.par_botton}
Check the file!
:::
```python
x = {"a": 37, "b": 42, "c": 927}
y = "hello " + "world"

class foo(object):
    def f(self):
        return y ** 2

    def g(self, x: int, y: int = 42) -> int:
        return x - -y
```

## Integrated development environment (IDE)

Using an Integrated development environment (IDE) will certainly save you time, but the advantages of using an IDE go beyond that. Below are some IDE advantages

- Syntax highlighting
- Text autocompletion
- Refactoring options
- Easily Importing libraries
- Build, compile, or run

